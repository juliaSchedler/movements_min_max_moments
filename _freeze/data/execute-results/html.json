{
  "hash": "5a89399cce2256c3e2eb7aa93332158b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Sourcing and Processing\"\nformat: html\nexecute: \n  freeze: auto # re-render only when source changes.\n---\n\n\n\n\nThis file will detail the data source and pre-processing, as well as a missing data report, a summary statisics for whole series. For this stage of the project, we only use the `tidyverse` and `lubridate` packages.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nsource(\"code/cummax_ignore_na.R\")\nsource(\"code/cummin_ignore_na.R\")\n```\n:::\n\n\n\n\n## Data Source\n\nThree data sets were downloaded from the NOAA National Weather service [NOWData tool](https://www.weather.gov/wrh/Climate?wfo=lox).\n\nAll data sets are for Paso Robles, CA, from the start of data collection (\"por\") to present (2025). \n\n![NOAA NOW Data map tool visualizing location of data source in Paso Robles, CA](images/location.png)\n\nWe requested the monthly maximums, monthly minimums, and monthly averages.\n\n![Screenshot of inputs for the monthly maximums data set](images/max.png) After clicking \"Go\", a data table pops up. We copied it and pasted into Microsoft Excel, removed the summary rows included at the bottom, then saved as a csv.\n\nThis process yielded 3 csv files: paso_max.csv, paso_min.csv, and paso_avg.csv.\n\n## Monthly data\n\nRead in, combine, and process data from the csv files obtained above.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nThis gets us three monthly time series, which we can visualize.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"max\" = \"red\", \"min\" = \"blue\", \"mean\"=\"grey\", \"Winter\" = \"#2f77c3\", \"Spring\" = \"#61bf9a\", \"Summer\" = \"#f94994\", \"Fall\" =  \"#eb9911\")\n\nmonthly_weather %>% \n  ggplot(aes(x = date)) +\n  geom_line(aes(y = min, col = \"min\")) + \n  geom_line(aes(y = max, col = \"max\")) + \n  geom_line(aes(y = mean, col = \"mean\")) + \n  scale_color_manual(values = cols)\n```\n\n::: {.cell-output-display}\n![](data_files/figure-html/visualize-monthly-1.png){width=672}\n:::\n:::\n\n\n\n\nSince there is a big gap in the data after the beginning of the series, we will start the sonification after that period.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_weather <- monthly_weather %>% filter(year>1909)\nmonthly_weather %>% \n  ggplot(aes(x = date)) +\n  geom_line(aes(y = min, col = \"min\")) + \n  geom_line(aes(y = max, col = \"max\")) + \n  geom_line(aes(y = mean, col = \"mean\")) + \n  scale_color_manual(values = cols)\n```\n\n::: {.cell-output-display}\n![](data_files/figure-html/visualize-monthly_subset-1.png){width=672}\n:::\n:::\n\n\n\n\n### Seasonal Data\n\nAlso, since the data is a bit noisy, let's look at some seasonal summaries for each series as well.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_weather <- monthly_weather %>% \n  mutate(\n    season = case_when(\n      month %in% c(\"Dec\", \"Jan\", \"Feb\") ~ \"Winter\",\n      month %in% c(\"Mar\", \"Apr\", \"May\")  ~ \"Spring\",\n      month %in% c(\"June\", \"July\", \"Aug\")  ~ \"Summer\",\n      month %in% c(\"Sept\", \"Oct\", \"Nov\") ~ \"Fall\"\n  ),\n  season_color = case_when(\n      month %in%  c(\"Dec\", \"Jan\", \"Feb\")  ~ \"#2f77c3\",\n      month %in% c(\"Mar\", \"Apr\", \"May\")  ~ \"#61bf9a\",\n      month %in% c(\"June\", \"July\", \"Aug\")  ~ \"#f94994\",\n      month %in% c(\"Sept\", \"Oct\", \"Nov\") ~ \"#eb9911\"\n  ), \n  season_year = case_when(\n      month == \"Dec\" ~ year + 1,  # December belongs to *next* Jan/Feb\n      .default = year\n  ),\n    season_label = paste(season, season_year)\n  ) %>%   \n  group_by(season, year) %>%\n  ungroup()  \n\n\nmonthly_weather <- monthly_weather %>%\n  group_by(season_label, season_year) %>%\n  mutate(\n    xmin = min(date),\n    xmax = max(date),\n    seas_avg = mean(mean),\n    seas_max = max(max),\n    seas_min = min(min),\n    season_color = unique(season_color),\n    season = unique(season)\n  ) %>%\n  ungroup()\n\nmonthly_weather \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,392 × 15\n    year month   min  mean   max date       season season_color season_year\n   <int> <chr> <int> <dbl> <int> <date>     <chr>  <chr>              <dbl>\n 1  1910 Jan      21  44.7    72 1910-01-01 Winter #2f77c3             1910\n 2  1910 Feb      18  48.2    75 1910-02-01 Winter #2f77c3             1910\n 3  1910 Mar      31  55.6    86 1910-03-01 Spring #61bf9a             1910\n 4  1910 Apr      35  59.3    99 1910-04-01 Spring #61bf9a             1910\n 5  1910 May      30  63.5   110 1910-05-01 Spring #61bf9a             1910\n 6  1910 June     34  65     105 1910-06-01 Summer #f94994             1910\n 7  1910 July     36  69.4   109 1910-07-01 Summer #f94994             1910\n 8  1910 Aug      36  67.6   106 1910-08-01 Summer #f94994             1910\n 9  1910 Sept     35  66.1   105 1910-09-01 Fall   #eb9911             1910\n10  1910 Oct      32  61.7   104 1910-10-01 Fall   #eb9911             1910\n# ℹ 1,382 more rows\n# ℹ 6 more variables: season_label <chr>, xmin <date>, xmax <date>,\n#   seas_avg <dbl>, seas_max <int>, seas_min <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n## visualize\n```\n:::\n\n\n\n\nWe can visualize the seasonal data over the monthly data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(monthly_weather %>% filter(year <1933), aes(x = date)) +\n  geom_line(aes(y = min, color = \"min\")) +\n  geom_line(aes(y = max, color = \"max\")) +\n  geom_line(aes(y = mean, color = \"mean\")) +\n    geom_rect( aes(xmin = xmin, xmax = xmax, \n                ymin = seas_avg-1, ymax = seas_avg+1,\n                fill = season), inherit.aes = FALSE) +\n    geom_rect(aes(xmin = xmin, xmax = xmax, \n                ymin = seas_max-1, ymax = seas_max+1,\n                fill = season), inherit.aes = FALSE) +\n    geom_rect(aes(xmin = xmin, xmax = xmax, \n                ymin = seas_min-1, ymax = seas_min+1,\n                fill = season), inherit.aes = FALSE) +\n  scale_color_manual(values = cols)\n```\n\n::: {.cell-output-display}\n![](data_files/figure-html/visualize_monthly-1.png){width=672}\n:::\n:::\n\n\n\n\nor, on its own\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(monthly_weather, aes(x = xmin)) +\n  geom_line(aes(y = seas_min, color = \"min\")) +\n  geom_point(aes(y = seas_min, color = season)) +\n  geom_line(aes(y = seas_max, color = \"max\")) +\n  geom_point(aes(y = seas_max, color = season)) +\n  geom_line(aes(y = seas_avg, color = \"mean\")) +\n  geom_point(aes(y = seas_avg, color = season)) +\n  scale_color_manual(values = cols) + \n  scale_x_date(labels = monthly_weather$season_year[monthly_weather$season == \"Winter\" & monthly_weather$season_year %%5 ==0], \n               breaks = monthly_weather$xmin[monthly_weather$season == \"Winter\"& monthly_weather$season_year %%5 ==0]) +\n  theme(axis.text.x = element_text(angle = 25))\n```\n\n::: {.cell-output-display}\n![](data_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Exceedances\n\nWhen the seasonal max or min reaches a new high or low, indicate this with a true/false.\n\nWe can either set this to start from the beginning of the series, or start the \"counter\" at a certain time. Since we will have three parts to our music where the last part contains the most information (the last part).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- monthly_weather %>%\ngroup_by(season) %>%\narrange(date) %>%\nmutate(\nstart_flag = year > 1977,\ncummax = cummax_ignore_na(max, start_flag),\ncummin = cummin_ignore_na(min, start_flag),\nnew_max = cummax == max,\nnew_min = cummin == min\n) %>%\nungroup()\n\nmonthly_weather$new_max <- out$new_max\nmonthly_weather$new_min <- out$new_min\n\n\nggplot(monthly_weather, aes(x = date)) +\n  geom_line(aes(y = min, color = \"min\")) +\n  geom_point(aes(y = min, color = season)) +\n  geom_line(aes(y = max, color = \"max\")) +\n  geom_point(aes(y = max, color = season)) +\n  geom_line(aes(y = mean, color = \"mean\")) +\n  geom_point(aes(y = mean, color = season)) +\n  geom_point(data = filter(monthly_weather, new_max),\n             aes(x = date, y = max, color = season), size = 6, shape = 17) +\n  geom_point(data = filter(monthly_weather, new_min),\n             aes(x = date, y = min, color = season), size = 6, shape = 15) +\n  scale_color_manual(values = cols) + \n  scale_x_date(labels = monthly_weather$season_year[monthly_weather$season == \"Winter\" & monthly_weather$season_year %%5 ==0], \n               breaks = monthly_weather$xmin[monthly_weather$season == \"Winter\"& monthly_weather$season_year %%5 ==0]) +\n  theme(axis.text.x = element_text(angle = 25))\n```\n\n::: {.cell-output-display}\n![](data_files/figure-html/exceedances-1.png){width=672}\n:::\n:::\n\n\n\n\n## Missing Data\n\nAs you will hear (and see) in the animation, there are occasionally missing data points, resulting in silence! \n\n## Output data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(monthly_weather, file = \"data/monthly_weather\")\n#save(seasonal_weather, file = \"data/seasonal_weather\")\n#save(seasonal_exceedances, file = \"data/seasonal_exceedances\")\n```\n:::\n",
    "supporting": [
      "data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}