[
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Sourcing and Processing",
    "section": "",
    "text": "For monthly temperature data, this file shows:\nCode\n# Set up packages and functions\nlibrary(tidyverse)\nlibrary(kableExtra)\nlibrary(htmlTable)\nlibrary(gt)\nsource(\"code/cummax_ignore_na.R\")\nsource(\"code/cummin_ignore_na.R\")",
    "crumbs": [
      "Sonification",
      "Data and Processing"
    ]
  },
  {
    "objectID": "data.html#data-source",
    "href": "data.html#data-source",
    "title": "Data Sourcing and Processing",
    "section": "Data Source",
    "text": "Data Source\nThree data sets were downloaded from the NOAA National Weather service NOWData tool.\nAll data sets are for Paso Robles, CA, from the start of data collection (“por”) to present (2025).\n\n\n\nNOAA NOW Data map tool visualizing location of data source in Paso Robles, CA\n\n\nWe requested the monthly maximums, monthly minimums, and monthly averages.\n After clicking “Go”, a data table pops up. We copied it and pasted into Microsoft Excel, removed the summary rows included at the bottom, then saved as a csv.\nThis process yielded 3 csv files: paso_max.csv, paso_min.csv, and paso_avg.csv.",
    "crumbs": [
      "Sonification",
      "Data and Processing"
    ]
  },
  {
    "objectID": "data.html#process-data",
    "href": "data.html#process-data",
    "title": "Data Sourcing and Processing",
    "section": "Process Data",
    "text": "Process Data\nRead in, combine, and process data from the csv files obtained above.\n\n\nCode\n## Read in Csv's for min, mean, max\nmin_data &lt;- read.csv(\"data/paso_min.csv\", na.strings = \"M\")\nmin_data &lt;- min_data %&gt;% \n  select(-Annual) %&gt;% \n  pivot_longer( ## one row = one month\n    cols = Jan:Dec, \n    names_to =\"month\", \n    values_to = \"min\"\n    )\n\n\n\nmean_data &lt;- read.csv(\"data/paso_avg.csv\", na.strings = \"M\")\n\nmean_data &lt;- mean_data %&gt;% \n  select(-Annual) %&gt;% \n  pivot_longer( ## one row = one month\n    cols = Jan:Dec, \n    names_to =\"month\", \n    values_to = \"mean\"\n    )\n\n\nmax_data &lt;- read.csv(\"data/paso_max.csv\", na.strings = \"M\")\n\nmax_data &lt;- max_data %&gt;% \n  select(-Annual) %&gt;% \n  pivot_longer( ## one row = one month\n    cols = Jan:Dec,\n    names_to =\"month\", \n    values_to = \"max\"\n    )\n\n## combine data sets and add date formatting\nmonthly_weather &lt;- bind_cols(min_data, \n                             mean_data[,3], \n                             max_data[,3]) %&gt;%\n  mutate(date = ym(paste0(year, \"-\", month))) \n\n## add seasonal variables \n\nmonthly_weather &lt;- monthly_weather %&gt;% \n  mutate(\n    season = case_when(\n      month %in% c(\"Dec\", \"Jan\", \"Feb\") ~ \"Winter\",\n      month %in% c(\"Mar\", \"Apr\", \"May\")  ~ \"Spring\",\n      month %in% c(\"June\", \"July\", \"Aug\")  ~ \"Summer\",\n      month %in% c(\"Sept\", \"Oct\", \"Nov\") ~ \"Fall\"\n  ),\n  season_color = case_when(\n      month %in%  c(\"Dec\", \"Jan\", \"Feb\")  ~ \"#2f77c3\",\n      month %in% c(\"Mar\", \"Apr\", \"May\")  ~ \"#61bf9a\",\n      month %in% c(\"June\", \"July\", \"Aug\")  ~ \"#f94994\",\n      month %in% c(\"Sept\", \"Oct\", \"Nov\") ~ \"#eb9911\"\n  ), \n  season_year = case_when(\n      month == \"Dec\" ~ year + 1,  # December belongs to *next* Jan/Feb\n      .default = year\n  ),\n    season_label = paste(season, season_year)\n  ) %&gt;%   \n  group_by(season, year) %&gt;%\n  ungroup()  %&gt;%\n  mutate(\n         month = factor(month, levels = c(\"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\" , \"June\", \"July\", \"Aug\",  \"Sept\", \"Oct\",  \"Nov\") ))\n\n\n\nmonthly_weather &lt;- monthly_weather %&gt;%\n  group_by(season_label, season_year) %&gt;%\n  mutate(\n    xmin = min(date),\n    xmax = max(date),\n    seas_avg = mean(mean),\n    seas_max = max(max),\n    seas_min = min(min),\n    season_color = unique(season_color),\n    season = unique(season)\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(season = factor(season, levels = c(\"Winter\", \"Spring\", \"Summer\", \"Fall\")))\n\n\nThis gets us three monthly time series, which we can visualize.\n\nVisualize Raw Data\n\n\nCode\n## color palatte\nplot_cols &lt;- c(\"max\" = \"red\", \"min\" = \"blue\", \"mean\"=\"grey\", \"Winter\" = \"#2f77c3\", \"Spring\" = \"#61bf9a\", \"Summer\" = \"#f94994\", \"Fall\" =  \"#eb9911\")\n\nmonthly_weather %&gt;% \n  ggplot(aes(x = date)) +\n  geom_line(aes(y = min, col = \"min\")) + \n  geom_line(aes(y = max, col = \"max\")) + \n  geom_line(aes(y = mean, col = \"mean\")) + \n  scale_color_manual(values = plot_cols)\n\n\n\n\n\n\n\n\n\nWe can clearly see that the maximum series is consistently above the average, which is consistently above the minimum, as we expect.\nIt’s hard to see the monthly variation on this long time scale, so we will zoom in to just 10 years of data starting after the missing data period at the beginning (after 1909):.\n\nZoom in\n\n\nCode\nmonthly_weather %&gt;% \n  filter(between(year, 1910, 1919)) %&gt;%\n  ggplot(aes(x = date)) +\n  geom_line(aes(y = min, col = \"min\")) + \n  geom_point(aes(y = min, col = \"min\"))+\n  geom_line(aes(y = max, col = \"max\")) + \n  geom_point(aes(y = max, col = \"max\"))+ \n  geom_line(aes(y = mean, col = \"mean\")) +  \n  geom_point(aes(y = mean, col = \"mean\"))+\n  scale_color_manual(values = plot_cols)\n\n\n\n\n\n\n\n\n\nEach dot on the plot corresponds to one month in a given year. The annual seasonal patterns are defined by the apparent winter valleys and summer peaks.\n\n\nSeasonal Info\nWe can add the information about each season by coloring the points in the above plot:\n\n\nCode\nmonthly_weather %&gt;% \n  filter(between(year, 1910, 1919)) %&gt;%\n  ggplot(aes(x = date)) +\n  geom_line(aes(y = min, col = \"min\")) + \n  geom_point(aes(y = min, col = season))+\n  geom_line(aes(y = max, col = \"max\")) + \n  geom_point(aes(y = max, col = season))+ \n  geom_line(aes(y = mean, col = \"mean\")) +  \n  geom_point(aes(y = mean, col = season))+\n  scale_color_manual(values = plot_cols)\n\n\n\n\n\n\n\n\n\nSummer and winter are confirmed as the high and low points, and we see spring and fall on the appropriate “sides” of the distribution. We see these relative seasonal patterns in all three summary statistics, which makes sense: we expect the lowest high to be in winter, and the highest low to be in summer, and so on.\nSince months and seasons both capture the structure of the annual variation, we can aggregate to the monthly or seasonal level to gain additional insight to the series as a whole (without having to zoom in).",
    "crumbs": [
      "Sonification",
      "Data and Processing"
    ]
  },
  {
    "objectID": "data.html#summary-statistics",
    "href": "data.html#summary-statistics",
    "title": "Data Sourcing and Processing",
    "section": "Summary Statistics",
    "text": "Summary Statistics\nWe will visually (plots) and numerically (tables) examine the following statistics:\n\nminimum of monthly mins\nmean of monthly means\nmax of monthly maxxes\n\n\nAll Time Summary Statistics\nFor the full history January 1900- May 2025.\n\nHistogramsBoxplotsTable\n\n\n\n\nCode\nsummary_table_all &lt;- monthly_weather %&gt;% \n  summarise(\n    ## mean \n    mean_Min = mean(min, na.rm = T), \n    mean_Mean = mean(mean, na.rm = T), \n    mean_Max = mean(max, na.rm = T), \n    ## sd\n    sd_Min= sd(min, na.rm = T),\n    sd_Mean = sd(mean, na.rm = T),\n    sd_Max = sd(max, na.rm = T),\n    ## max \n    max_Min = max(min, na.rm = T),\n    max_Mean = max(mean, na.rm = T),\n    max_Max = max(max, na.rm = T),\n    ## min\n    min_Min = min(min, na.rm = T),\n    min_Mean = min(mean, na.rm = T),\n    min_Max = min(max, na.rm = T),\n  )\n\n## chat help\n\nfacet_vars &lt;- c(\"min\", \"mean\", \"max\")\n\n# Step 1: Pivot your summary table\nvline_data &lt;- summary_table_all %&gt;%\n  pivot_longer(cols = contains(c(\"Min_min\", \"Mean_mean\", \"Max_max\")),\n               names_to = \"name\", values_to = \"xintercept\") \nvline_data$name = facet_vars\n\n\nmonthly_weather %&gt;%\n  bind_cols(summary_table_all[rep(1, nrow(monthly_weather)), ]) %&gt;%\n  select(-c(xmin, xmax)) %&gt;%\n  pivot_longer(cols = contains(c(\"min\", \"mean\", \"max\"))) %&gt;%\n  filter(name %in% facet_vars) %&gt;%\n  select(year, month, date, season, name, value) %&gt;%\n  ggplot(aes(x = value, fill = name)) +\n  geom_histogram(bins = 30) +\n  geom_vline(\n    data = vline_data,\n    aes(xintercept = xintercept),\n    color = \"black\", linewidth = 2, linetype = \"solid\"\n  ) +\n  geom_vline(\n    data = vline_data,\n    aes(xintercept = xintercept, color = name),\n    linewidth = 1, linetype = \"solid\"\n  ) +\n  facet_grid(name~., scales = \"fixed\") +\n  theme_minimal() +\n  scale_fill_manual(values = plot_cols)+\n  scale_color_manual(values = plot_cols)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n## chat help\n\nfacet_vars &lt;- c(\"min\", \"mean\", \"max\")\n\n# Step 1: Pivot your summary table\nvline_data &lt;- summary_table_all %&gt;%\n  pivot_longer(cols = contains(c(\"min_Min\", \"Mean_mean\", \"Max_max\")),\n               names_to = \"name\", values_to = \"xintercept\") \nvline_data$name = facet_vars\n\n\nmonthly_weather %&gt;%\n  bind_cols(summary_table_all[rep(1, nrow(monthly_weather)), ]) %&gt;%\n  select(-c(xmin, xmax)) %&gt;%\n  pivot_longer(cols = contains(c(\"min\", \"mean\", \"max\"))) %&gt;%\n  filter(name %in% facet_vars) %&gt;%\n  select(year, month, date, season, name, value) %&gt;%\n  ggplot(aes(x = value, fill = name)) +\n  geom_boxplot() +\n    geom_vline(\n    data = vline_data,\n    aes(xintercept = xintercept),\n    color = \"black\", linewidth = 2, linetype = \"solid\"\n  ) +\n  geom_vline(\n    data = vline_data,\n    aes(xintercept = xintercept, color = name),\n    linewidth = 1, linetype = \"solid\"\n  ) +\n  facet_grid(name~., scales = \"fixed\") +\n  theme_minimal() +\n  scale_fill_manual(values = plot_cols)+\n  scale_color_manual(values = plot_cols)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table_all %&gt;%\nselect(-c(max_Min, min_Max, min_Mean, max_Mean))%&gt;%\ngt() %&gt;%\n  tab_header(\n    title = \"All-time Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    min_Min = \"Min\", \n    mean_Min = \"Mean\",\n    sd_Min = \"SD\", \n    mean_Mean = \"Mean\", \n    sd_Mean = \"SD\", \n    max_Max = \"Max\",\n    mean_Max = \"Mean\",\n    sd_Max= \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(min_Min, mean_Min, sd_Min)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(mean_Mean, sd_Mean)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(mean_Max, sd_Max, max_Max)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Summaries\n\n\n\nMonthly Means\n\n\nMonthly Maximums\n\n\nMonthly Minimums\n\n\n\nMean\nSD\nMean\nSD\nMax\nMin\nMean\nSD\n\n\n\n\n59.02\n9.22\n90.69\n13.27\n117.00\n0.00\n32.13\n8.52\n\n\n\n\n\n\n\n\n\n\n\n\nMonthly Level Summaries\n\nPlot (aggregated)Plot (raw)Table\n\n\n\n\nCode\nmonth.abb = c(\"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\" , \"June\", \"July\", \"Aug\",  \"Sept\", \"Oct\",  \"Nov\") \nsummary_table &lt;- monthly_weather %&gt;% \n  mutate(month = factor(month, levels = month.abb)) %&gt;%\n  group_by(month) %&gt;%\n   summarise(\n    ## mean \n    mean_Min = mean(min, na.rm = T), \n    mean_Mean = mean(mean, na.rm = T), \n    mean_Max = mean(max, na.rm = T), \n    ## sd\n    sd_Min= sd(min, na.rm = T),\n    sd_Mean = sd(mean, na.rm = T),\n    sd_Max = sd(max, na.rm = T),\n    ## max \n    max_Min = max(min, na.rm = T),\n    max_Mean = max(mean, na.rm = T),\n    max_Max = max(max, na.rm = T),\n    ## min\n    min_Min = min(min, na.rm = T),\n    min_Mean = min(mean, na.rm = T),\n    min_Max = min(max, na.rm = T),\n  )%&gt;%\n  arrange(month)\n\nplot_cols &lt;- c(plot_cols, \"min_Min\" = \"blue\", \"mean_Mean\" = \"grey\", \"max_Max\" = \"red\")\n\nagg_plot&lt;- summary_table %&gt;% \n  ggplot(aes(x = month)) + \n  geom_line(aes(y = min_Min, col = \"min_Min\", group = 1), linewidth = .75) + \n  geom_line(aes(y = mean_Mean, col = \"mean_Mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = max_Max, col = \"max_Max\", group = 1), linewidth = .75) + \n  geom_point(aes(y = min_Min, col = \"min_Min\", group = 1), size = 3) + \n  geom_point(aes(y = mean_Mean, col = \"mean_Mean\", group = 1), size = 3) + \n  geom_point(aes(y = max_Max, col = \"max_Max\", group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  ylab(\"Temperature (F)\")+ xlab(\"Month\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + ylim(c(0,120))\n\nagg_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nagg_plot + \n  geom_point(data = monthly_weather, aes(x = month, y = min, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = month, y = mean, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = month, y = max, col = season), alpha = 0.1, position = position_jitter())  +\n  ylab(\"Temperature (F)\")+ xlab(\"Month\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + \n  ylim(c(0,120))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;%\nselect(-c(max_Min, min_Max, min_Mean, max_Mean))%&gt;%\ngt() %&gt;%\n  tab_header(\n    title = \"All-time Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    min_Min = \"Min\", \n    mean_Min = \"Mean\",\n    sd_Min = \"SD\", \n    mean_Mean = \"Mean\", \n    sd_Mean = \"SD\", \n    max_Max = \"Max\",\n    mean_Max = \"Mean\",\n    sd_Max= \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(min_Min, mean_Min, sd_Min)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(mean_Mean, sd_Mean)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(mean_Max, sd_Max, max_Max)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Summaries\n\n\nmonth\n\nMonthly Means\n\n\nMonthly Maximums\n\n\nMonthly Minimums\n\n\n\nMean\nSD\nMean\nSD\nMax\nMin\nMean\nSD\n\n\n\n\nDec\n46.95\n2.47\n73.08\n4.52\n87.00\n7.00\n21.21\n4.44\n\n\nJan\n47.05\n2.71\n72.75\n4.51\n83.00\n0.00\n21.74\n5.42\n\n\nFeb\n50.06\n2.68\n75.99\n4.91\n85.00\n13.00\n25.34\n4.28\n\n\nMar\n53.06\n2.79\n81.32\n5.29\n91.00\n20.00\n29.23\n3.69\n\n\nApr\n56.75\n2.63\n89.06\n5.51\n100.00\n24.00\n31.55\n3.29\n\n\nMay\n61.84\n2.53\n96.31\n4.90\n110.00\n30.00\n35.67\n3.34\n\n\nJune\n67.56\n2.52\n103.65\n4.09\n115.00\n31.00\n39.69\n3.40\n\n\nJuly\n71.77\n2.36\n106.84\n3.44\n115.00\n36.00\n43.12\n3.33\n\n\nAug\n71.47\n2.14\n105.86\n3.35\n117.00\n32.00\n42.58\n3.66\n\n\nSept\n68.33\n2.48\n103.47\n4.54\n115.00\n28.00\n39.08\n3.78\n\n\nOct\n61.41\n2.50\n96.05\n4.43\n108.00\n19.00\n31.71\n4.30\n\n\nNov\n52.72\n2.39\n84.25\n4.96\n95.00\n14.00\n24.86\n4.47\n\n\n\n\n\n\n\n\n\n\n\n\nSeasonal Level Summaries\n\nPlot (aggregated)Plot (raw)HistogramTable\n\n\n\n\nCode\nsummary_table_seasonal &lt;- monthly_weather %&gt;% \n  mutate(season = factor(season, levels = c(\"Winter\", \"Spring\", \"Summer\", \"Fall\"))) %&gt;%\n  mutate(month = factor(month, levels = month.abb)) %&gt;%\n  group_by(season) %&gt;%\n   summarise(\n    ## mean \n    mean_Min = mean(min, na.rm = T), \n    mean_Mean = mean(mean, na.rm = T), \n    mean_Max = mean(max, na.rm = T), \n    ## sd\n    sd_Min= sd(min, na.rm = T),\n    sd_Mean = sd(mean, na.rm = T),\n    sd_Max = sd(max, na.rm = T),\n    ## max \n    max_Min = max(min, na.rm = T),\n    max_Mean = max(mean, na.rm = T),\n    max_Max = max(max, na.rm = T),\n    ## min\n    min_Min = min(min, na.rm = T),\n    min_Mean = min(mean, na.rm = T),\n    min_Max = min(max, na.rm = T),\n  )%&gt;%\n  arrange(season)\n\nplot_cols &lt;- c(plot_cols, \"min_Min\" = \"blue\", \"mean_Mean\" = \"grey\", \"max_Max\" = \"red\")\n\n\n\nsummary_table_seasonal %&gt;% \n  ggplot(aes(x = season)) + \n  geom_line(aes(y = min_Min, col = \"min_Min\", group = 1), linewidth = .75) + \n  geom_line(aes(y = mean_Mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = max_Max, col = \"max_Max\", group = 1), linewidth = .75) + \n  geom_point(aes(y = min_Min, col = season, group = 1), size = 3) + \n  geom_point(aes(y = mean_Mean, col = season, group = 1), size = 3) + \n  geom_point(aes(y = max_Max, col = season, group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  ylab(\"Temperature (F)\")+ xlab(\"Season\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + ylim(c(0,120))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table_seasonal %&gt;% \n  ggplot(aes(x = season)) + \n  geom_line(aes(y = min_Min, col = \"min_Min\", group = 1), linewidth = .75) + \n  geom_line(aes(y = mean_Mean, col = \"mean_Mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = max_Max, col = \"max_Max\", group = 1), linewidth = .75) + \n  geom_point(aes(y = min_Min, col = season, group = 1), size = 3) + \n  geom_point(aes(y = mean_Mean, col = season, group = 1), size = 3) + \n  geom_point(aes(y = max_Max, col = season, group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  geom_point(data = monthly_weather, aes(x = season, y = min, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = season, y = mean, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = season, y = max, col = season), alpha = 0.1, position = position_jitter()) +\n  ylab(\"Temperature (F)\")+ xlab(\"Year\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5))+ ylim(c(0, 120))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n## chat help\n\nfacet_vars &lt;- c(\"min\", \"mean\", \"max\")\n\n# Step 1: Pivot your summary table\nvline_data &lt;- summary_table_seasonal%&gt;%\n  group_by(season) %&gt;%\n  pivot_longer(cols = contains(c(\"min_Min\", \"mean_Mean\", \"max_Max\")),\n               names_to = \"Statistic\", values_to = \"xintercept\") \nvline_data$Statistic = rep(facet_vars, times = 4)\n\n\nmonthly_weather %&gt;%\n  bind_cols(summary_table_seasonal[rep(1, nrow(monthly_weather)), ]) %&gt;%\n  select(-c(xmin, xmax)) %&gt;%\n  pivot_longer(cols = contains(c(\"min\", \"mean\", \"max\")), names_to = \"Statistic\") %&gt;%\n  filter(Statistic %in% facet_vars) %&gt;%\n  select(year, month, date, season...7, Statistic, value) %&gt;%\n  rename(season=season...7) %&gt;%\n  ggplot(aes(x = value, fill = season)) +\n  geom_histogram(bins = 30) +\n  geom_vline(\n    data = vline_data,\n    aes(xintercept = xintercept, col = Statistic),\n    linewidth = 1, linetype = \"dashed\"\n  ) +\n  facet_grid(Statistic~season, scales = \"fixed\") +\n  theme_minimal() +\n  scale_fill_manual(values = plot_cols) + \n  scale_color_manual(values = plot_cols)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table_seasonal %&gt;%\n select(-c(max_Min, min_Max, min_Mean, max_Mean))%&gt;%\ngt() %&gt;%\n  tab_header(\n    title = \"All-time Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    min_Min = \"Min\", \n    mean_Min = \"Mean\",\n    sd_Min = \"SD\", \n    mean_Mean = \"Mean\", \n    sd_Mean = \"SD\", \n    max_Max = \"Max\",\n    mean_Max = \"Mean\",\n    sd_Max= \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(min_Min, mean_Min, sd_Min)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(mean_Mean, sd_Mean)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(mean_Max, sd_Max, max_Max)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Summaries\n\n\nseason\n\nMonthly Means\n\n\nMonthly Maximums\n\n\nMonthly Minimums\n\n\n\nMean\nSD\nMean\nSD\nMax\nMin\nMean\nSD\n\n\n\n\nWinter\n48.03\n2.99\n73.94\n4.86\n87.00\n0.00\n22.77\n5.07\n\n\nSpring\n57.19\n4.48\n88.89\n8.05\n110.00\n20.00\n32.15\n4.35\n\n\nSummer\n70.27\n3.02\n105.45\n3.87\n117.00\n31.00\n41.79\n3.77\n\n\nFall\n60.82\n6.87\n94.62\n9.17\n115.00\n14.00\n31.90\n7.16\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYearly\n\n\n\n\n\n\nPlot (aggregated)Plot (raw)Plot (raw + seasonal)Table\n\n\n\n\nCode\nsummary_table_yearly&lt;- monthly_weather %&gt;% \n  group_by(year) %&gt;%\n   summarise(\n    ## mean \n    mean_Min = mean(min, na.rm = T), \n    mean_Mean = mean(mean, na.rm = T), \n    mean_Max = mean(max, na.rm = T), \n    ## sd\n    sd_Min= sd(min, na.rm = T),\n    sd_Mean = sd(mean, na.rm = T),\n    sd_Max = sd(max, na.rm = T),\n    ## max \n    max_Min = max(min, na.rm = T),\n    max_Mean = max(mean, na.rm = T),\n    max_Max = max(max, na.rm = T),\n    ## min\n    min_Min = min(min, na.rm = T),\n    min_Mean = min(mean, na.rm = T),\n    min_Max = min(max, na.rm = T),\n  )%&gt;%\n  arrange(year)\n\nplot_cols &lt;- c(plot_cols, \"min_Min\" = \"blue\", \"mean_Mean\" = \"grey\", \"max_Max\" = \"red\")\n\n\n\nagg_plot &lt;- summary_table_yearly %&gt;% \n  filter(year &gt;1909) %&gt;%\n  ggplot(aes(x = year)) + \n  geom_line(aes(y = min_Min, col = \"min_Min\", group = 1), linewidth = .75) + \n  geom_line(aes(y = mean_Mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = max_Max, col = \"max_Max\", group = 1), linewidth = .75) + \n  geom_point(aes(y = min_Min, col = \"min_Min\", group = 1), size = 3) + \n  geom_point(aes(y = mean_Mean, col = \"Mean_mean\", group = 1), size = 3) + \n  geom_point(aes(y = max_Max, col = \"max_Max\", group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  ylab(\"Temperature (F)\")+ xlab(\"Year\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + ylim(c(0,120))\n\nagg_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nagg_plot + \n  geom_point(data = monthly_weather, aes(x = year, y = min, col = \"min\"), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = year, y = mean, col = \"mean\"), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = year, y = max, col = \"max\"), alpha = 0.1, position = position_jitter()) +\n  ylab(\"Temperature (F)\")+ xlab(\"Year\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5))+ ylim(c(0, 120))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nagg_plot + \n  geom_point(data = monthly_weather, aes(x = year, y = min, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = year, y = mean, col =season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = year, y = max, col = season), alpha = 0.1, position = position_jitter()) +\n  ylab(\"Temperature (F)\")+ xlab(\"Year\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5))+ ylim(c(0, 120))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table_yearly %&gt;%\n  mutate(year = ymd(paste0(year, \"-01-01\")))%&gt;% select(-c(max_Min, min_Max, min_Mean, max_Mean))%&gt;%\ngt() %&gt;%\n  tab_header(\n    title = \"All-time Summaries\"\n  ) %&gt;%\n    fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  fmt_date(\n    columns = year,\n    date_style = \"year\"\n  )%&gt;%\n  cols_label(\n    min_Min = \"Min\", \n    mean_Min = \"Mean\",\n    sd_Min = \"SD\", \n    mean_Mean = \"Mean\", \n    sd_Mean = \"SD\", \n    max_Max = \"Max\",\n    mean_Max = \"Mean\",\n    sd_Max= \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(min_Min, mean_Min, sd_Min)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(mean_Mean, sd_Mean)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(mean_Max, sd_Max, max_Max)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Summaries\n\n\nyear\n\nMonthly Means\n\n\nMonthly Maximums\n\n\nMonthly Minimums\n\n\n\nMean\nSD\nMean\nSD\nMax\nMin\nMean\nSD\n\n\n\n\n1900\n58.77\n8.01\n89.50\n13.22\n110.00\n18.00\n33.00\n8.24\n\n\n1901\n58.44\n9.56\n89.00\n15.30\n110.00\n16.00\n31.17\n8.71\n\n\n1902\n54.15\n9.50\n86.83\n15.88\n109.00\n18.00\n28.58\n7.08\n\n\n1903\n54.67\n10.53\n85.43\n17.12\n106.00\n15.00\n27.14\n8.28\n\n\n1904\nNaN\nNA\nNaN\nNA\n−Inf\nInf\nNaN\nNA\n\n\n1905\nNaN\nNA\nNaN\nNA\n−Inf\nInf\nNaN\nNA\n\n\n1906\nNaN\nNA\nNaN\nNA\n−Inf\nInf\nNaN\nNA\n\n\n1907\nNaN\nNA\nNaN\nNA\n−Inf\nInf\nNaN\nNA\n\n\n1908\nNaN\nNA\nNaN\nNA\n−Inf\nInf\nNaN\nNA\n\n\n1909\n62.28\n9.91\n95.40\n16.35\n106.00\n15.00\n29.00\n8.37\n\n\n1910\n58.51\n8.41\n94.83\n14.06\n110.00\n16.00\n28.42\n7.99\n\n\n1911\n56.71\n8.74\n90.83\n13.49\n110.00\n13.00\n28.58\n8.77\n\n\n1912\n56.86\n8.61\n88.67\n14.58\n107.00\n11.00\n27.33\n9.18\n\n\n1913\n58.06\n9.85\n93.08\n14.08\n112.00\n0.00\n27.17\n10.62\n\n\n1914\n58.56\n7.45\n91.50\n13.61\n108.00\n19.00\n30.33\n6.58\n\n\n1915\n58.77\n8.86\n91.58\n14.76\n109.00\n17.00\n29.92\n8.07\n\n\n1916\n57.80\n10.24\n90.25\n15.69\n112.00\n13.00\n27.50\n9.29\n\n\n1917\n58.87\n11.25\n94.00\n15.83\n115.00\n18.00\n28.58\n8.13\n\n\n1918\n58.49\n10.57\n92.50\n12.08\n110.00\n16.00\n30.25\n9.51\n\n\n1919\n57.98\n9.92\n90.33\n15.26\n112.00\n16.00\n29.42\n8.13\n\n\n1920\n57.73\n9.14\n88.67\n15.80\n112.00\n22.00\n33.75\n7.03\n\n\n1921\n58.90\n9.06\n91.75\n12.64\n111.00\n19.00\n32.58\n7.76\n\n\n1922\n57.67\n10.96\n86.58\n16.36\n107.00\n17.00\n30.83\n7.69\n\n\n1923\n57.87\n9.34\n90.25\n14.04\n109.00\n17.00\n32.50\n8.47\n\n\n1924\n58.18\n8.74\n90.08\n13.61\n107.00\n9.00\n31.00\n9.50\n\n\n1925\n58.41\n8.00\n90.83\n14.17\n115.00\n24.00\n33.00\n6.58\n\n\n1926\n60.21\n9.04\n91.83\n12.90\n111.00\n24.00\n35.08\n5.55\n\n\n1927\n58.90\n8.68\n89.67\n13.83\n106.00\n24.00\n33.75\n6.08\n\n\n1928\n59.61\n8.99\n91.83\n15.09\n110.00\n21.00\n33.50\n7.54\n\n\n1929\n59.01\n10.11\n91.83\n15.07\n111.00\n21.00\n32.25\n8.01\n\n\n1930\n58.64\n8.75\n90.50\n12.82\n112.00\n20.00\n33.42\n7.04\n\n\n1931\n60.32\n10.43\n92.50\n14.62\n113.00\n20.00\n34.58\n7.51\n\n\n1932\n58.08\n10.51\n91.00\n15.50\n110.00\n19.00\n32.58\n7.50\n\n\n1933\n57.62\n10.34\n91.42\n17.55\n117.00\n21.00\n31.25\n7.84\n\n\n1934\n59.38\n8.46\n91.25\n13.88\n107.00\n26.00\n33.67\n4.72\n\n\n1935\n57.05\n10.23\n88.92\n13.81\n109.00\n22.00\n31.33\n7.64\n\n\n1936\n59.06\n10.14\n89.75\n15.60\n108.00\n22.00\n33.17\n7.07\n\n\n1937\n58.11\n11.21\n88.67\n16.07\n108.00\n14.00\n32.50\n8.82\n\n\n1938\n58.19\n9.33\n88.50\n14.57\n109.00\n19.00\n32.67\n8.80\n\n\n1939\n59.02\n9.81\n90.75\n14.08\n107.00\n23.00\n31.50\n6.60\n\n\n1940\n60.33\n7.93\n91.83\n14.10\n110.00\n16.00\n31.67\n9.31\n\n\n1941\n60.15\n7.14\n89.08\n12.69\n108.00\n18.00\n32.17\n7.93\n\n\n1942\n59.01\n10.14\n91.58\n14.54\n112.00\n18.00\n30.83\n9.07\n\n\n1943\n59.49\n7.81\n92.33\n11.97\n108.00\n15.00\n31.25\n8.02\n\n\n1944\n58.53\n8.65\n90.67\n14.39\n112.00\n23.00\n30.75\n6.65\n\n\n1945\n58.66\n9.54\n91.67\n14.36\n109.00\n16.00\n29.33\n8.26\n\n\n1946\n58.10\n10.10\n89.92\n13.83\n110.00\n16.00\n29.25\n9.36\n\n\n1947\n59.31\n10.12\n93.67\n13.58\n110.00\n15.00\n29.75\n9.24\n\n\n1948\n57.59\n9.64\n90.42\n13.67\n109.00\n15.00\n27.67\n10.33\n\n\n1949\n57.54\n10.69\n89.50\n15.71\n109.00\n10.00\n29.25\n10.22\n\n\n1950\n59.83\n8.01\n92.92\n13.89\n110.00\n13.00\n30.75\n8.79\n\n\n1951\n58.34\n9.29\n90.67\n14.69\n106.00\n21.00\n30.42\n8.07\n\n\n1952\n59.19\n9.89\n91.17\n12.68\n105.00\n21.00\n31.92\n7.04\n\n\n1953\n58.98\n8.78\n91.50\n10.47\n106.00\n16.00\n29.67\n9.27\n\n\n1954\n58.98\n9.01\n91.42\n13.45\n109.00\n17.00\n29.33\n8.35\n\n\n1955\n57.89\n9.51\n90.17\n13.32\n111.00\n19.00\n29.42\n7.14\n\n\n1956\n58.28\n9.22\n89.58\n12.86\n108.00\n16.00\n30.42\n8.69\n\n\n1957\n59.27\n9.89\n89.67\n14.94\n111.00\n17.00\n32.00\n10.54\n\n\n1958\n60.59\n9.40\n90.67\n13.74\n109.00\n14.00\n32.42\n10.63\n\n\n1959\n60.41\n9.41\n92.58\n11.97\n112.00\n17.00\n30.58\n9.08\n\n\n1960\n59.37\n9.75\n91.08\n14.61\n113.00\n11.00\n31.17\n9.29\n\n\n1961\n59.73\n10.54\n91.08\n14.44\n112.00\n17.00\n30.00\n9.53\n\n\n1962\n58.95\n8.86\n90.50\n10.38\n104.00\n17.00\n30.67\n9.38\n\n\n1963\n58.55\n9.30\n88.25\n11.99\n104.00\n12.00\n31.50\n9.45\n\n\n1964\n58.03\n9.63\n90.50\n12.63\n107.00\n20.00\n29.67\n8.77\n\n\n1965\n57.69\n9.08\n88.42\n9.97\n101.00\n19.00\n30.67\n7.49\n\n\n1966\n58.91\n9.52\n91.00\n13.45\n105.00\n20.00\n29.67\n7.33\n\n\n1967\n59.20\n10.94\n88.67\n14.37\n106.00\n15.00\n32.50\n10.02\n\n\n1968\n58.88\n9.08\n90.17\n11.75\n104.00\n16.00\n29.75\n8.14\n\n\n1969\n59.07\n9.66\n89.50\n13.55\n108.00\n19.00\n32.58\n8.44\n\n\n1970\n59.28\n8.86\n91.58\n14.50\n108.00\n14.00\n30.25\n8.28\n\n\n1971\n57.92\n10.25\n90.58\n13.43\n110.00\n19.00\n28.17\n8.90\n\n\n1972\n58.56\n9.71\n89.92\n13.33\n110.00\n16.00\n30.00\n8.55\n\n\n1973\n57.20\n9.13\n88.33\n15.29\n106.00\n15.00\n29.55\n7.06\n\n\n1974\n59.05\n9.67\n89.92\n13.62\n105.00\n15.00\n31.50\n8.96\n\n\n1975\n57.81\n9.24\n90.50\n12.00\n109.00\n14.00\n28.83\n10.25\n\n\n1976\n59.21\n9.47\n94.08\n12.00\n109.00\n11.00\n29.50\n10.66\n\n\n1977\n59.58\n9.23\n91.08\n11.83\n105.00\n19.00\n30.25\n8.16\n\n\n1978\n59.79\n9.68\n90.00\n13.90\n105.00\n15.00\n32.58\n7.55\n\n\n1979\n60.17\n10.13\n89.50\n15.01\n109.00\n19.00\n31.33\n9.24\n\n\n1980\n60.30\n8.05\n93.25\n12.61\n109.00\n20.00\n31.83\n7.49\n\n\n1981\n61.16\n8.77\n90.42\n12.16\n106.00\n25.00\n34.17\n6.99\n\n\n1982\n58.64\n9.48\n87.67\n14.25\n107.00\n23.00\n32.92\n6.50\n\n\n1983\n60.61\n8.95\n88.25\n14.55\n109.00\n24.00\n36.17\n7.49\n\n\n1984\n60.81\n10.51\n91.33\n14.08\n110.00\n23.00\n32.33\n6.65\n\n\n1985\n56.78\n9.66\n90.75\n12.84\n107.00\n20.00\n31.42\n8.58\n\n\n1986\n58.83\n9.25\n90.67\n10.05\n103.00\n22.00\n32.75\n6.89\n\n\n1987\n61.10\n7.77\n89.92\n14.61\n105.00\n14.00\n31.75\n10.96\n\n\n1988\n49.23\n5.70\n91.83\n11.88\n108.00\n23.00\n32.67\n7.94\n\n\n1989\n60.33\n9.45\n92.00\n11.62\n110.00\n18.00\n32.50\n9.43\n\n\n1990\n59.42\n11.32\n93.58\n12.35\n109.00\n7.00\n31.50\n12.67\n\n\n1991\n60.83\n8.79\n90.92\n13.06\n108.00\n17.00\n32.58\n9.90\n\n\n1992\n60.51\n9.95\n88.50\n12.69\n108.00\n22.00\n36.58\n8.99\n\n\n1993\n59.22\n8.77\n89.83\n13.08\n107.00\n20.00\n33.58\n8.38\n\n\n1994\n58.43\n9.93\n89.42\n12.09\n108.00\n21.00\n33.42\n8.87\n\n\n1995\n60.17\n7.98\n88.50\n12.31\n105.00\n30.00\n35.67\n5.55\n\n\n1996\n60.13\n8.56\n92.00\n13.81\n109.00\n24.00\n33.42\n6.72\n\n\n1997\n59.90\n9.01\n89.42\n12.71\n108.00\n21.00\n34.42\n8.30\n\n\n1998\n57.75\n9.82\n86.17\n14.97\n111.00\n16.00\n35.67\n9.39\n\n\n1999\n57.55\n8.89\n88.67\n12.12\n104.00\n21.00\n33.42\n8.34\n\n\n2000\n58.88\n9.14\n89.33\n15.06\n110.00\n21.00\n34.67\n8.72\n\n\n2001\n59.16\n10.25\n90.83\n14.35\n110.00\n22.00\n35.08\n8.75\n\n\n2002\n58.24\n9.71\n91.00\n14.59\n108.00\n22.00\n33.67\n8.24\n\n\n2003\n58.31\n9.60\n87.09\n13.90\n105.00\n21.00\n33.55\n8.77\n\n\n2004\n57.79\n9.23\n87.36\n13.89\n103.00\n23.00\n33.73\n8.30\n\n\n2005\n59.71\n9.11\n87.58\n12.40\n105.00\n26.00\n35.92\n6.75\n\n\n2006\n59.05\n11.02\n90.08\n13.71\n114.00\n22.00\n35.25\n9.67\n\n\n2007\n59.59\n10.53\n93.83\n11.87\n108.00\n13.00\n33.58\n10.59\n\n\n2008\n60.04\n10.55\n93.58\n14.09\n110.00\n24.00\n35.67\n8.96\n\n\n2009\n59.62\n10.31\n93.17\n13.54\n109.00\n24.00\n34.00\n8.16\n\n\n2010\n58.78\n8.47\n91.08\n14.12\n108.00\n23.00\n34.42\n6.95\n\n\n2011\n58.37\n9.75\n89.17\n12.30\n106.00\n19.00\n34.00\n8.55\n\n\n2012\n60.10\n10.00\n94.17\n13.47\n111.00\n18.00\n33.75\n9.55\n\n\n2013\n60.27\n10.66\n92.83\n12.91\n110.00\n15.00\n34.08\n9.95\n\n\n2014\n62.31\n8.45\n94.08\n11.86\n106.00\n25.00\n36.83\n8.96\n\n\n2015\n61.17\n10.09\n93.08\n11.85\n106.00\n20.00\n36.08\n10.85\n\n\n2016\n61.08\n8.97\n91.58\n13.82\n109.00\n22.00\n35.33\n8.13\n\n\n2017\n61.74\n10.35\n93.50\n14.60\n114.00\n19.00\n36.08\n9.89\n\n\n2018\n60.93\n9.45\n91.75\n12.14\n108.00\n21.00\n34.92\n9.93\n\n\n2019\n60.06\n9.85\n88.83\n13.82\n105.00\n23.00\n33.17\n7.90\n\n\n2020\n60.92\n10.43\n94.83\n14.96\n115.00\n21.00\n35.08\n9.87\n\n\n2021\n60.11\n9.71\n93.75\n11.79\n111.00\n24.00\n34.50\n8.87\n\n\n2022\n60.94\n11.28\n93.00\n14.74\n112.00\n23.00\n36.00\n9.90\n\n\n2023\n59.33\n9.74\n88.75\n14.57\n110.00\n26.00\n35.58\n8.38\n\n\n2024\n61.27\n10.46\n91.58\n15.05\n112.00\n26.00\n36.83\n9.25\n\n\n2025\n52.25\n4.21\n84.60\n5.41\n91.00\n24.00\n33.00\n8.00",
    "crumbs": [
      "Sonification",
      "Data and Processing"
    ]
  },
  {
    "objectID": "data.html#exceedances",
    "href": "data.html#exceedances",
    "title": "Data Sourcing and Processing",
    "section": "Exceedances",
    "text": "Exceedances\nWhen the seasonal max or min reaches a new high or low, indicate this with a true/false.\n\n\nCode\nout &lt;- monthly_weather %&gt;%\ngroup_by(season) %&gt;%\narrange(date) %&gt;%\nmutate(\nstart_flag = year &gt; 1977,\ncummax = cummax_ignore_na(max, start_flag),\ncummin = cummin_ignore_na(min, start_flag),\nnew_max = cummax == max,\nnew_min = cummin == min\n) %&gt;%\nungroup()\n\nmonthly_weather$new_max &lt;- out$new_max\nmonthly_weather$new_min &lt;- out$new_min\n\n\nWe can either set this to start from the beginning of the series, or start the “tracker” at a certain specific time. Since we will have three parts to our music and we want the exceedances to be part 3, we will start the tracker in 1977 (see Sonifcation Design page for reasoning behind choice of 1977).\n\nOverall Exceedance\n\nAll time exceedanceExceedance since 1977\n\n\n\n\nCode\nout_all &lt;- monthly_weather %&gt;%\narrange(date) %&gt;%\nmutate(\nstart_flag = year &gt; 1899,\ncummax = cummax_ignore_na(max, start_flag),\ncummin = cummin_ignore_na(min, start_flag),\nnew_max = cummax == max,\nnew_min = cummin == min\n) %&gt;%\nungroup()\n\nmonthly_weather$new_max_all_time &lt;- out_all$new_max\nmonthly_weather$new_min_all_time &lt;- out_all$new_min\n\nmonthly_weather %&gt;%\nggplot(aes(x = date)) +\n  geom_line(aes(y = min, color = \"min\")) +\n  geom_point(aes(y = min, color = \"min\"), alpha = 0.1) +\n  geom_line(aes(y = max, color = \"max\")) +\n  geom_point(aes(y = max, color = \"max\"), alpha = 0.1) +\n  geom_point(data = filter(monthly_weather, new_max_all_time),\n             aes(x = date, y = max, color = \"max\"), size = 6, shape = 17) +\n  geom_point(data = filter(monthly_weather, new_min_all_time),\n             aes(x = date, y = min, color = \"min\"), size = 6, shape = 15) +\n  scale_color_manual(values = plot_cols, name = \"Exceedance\\nType\") + \n  scale_x_date(labels = monthly_weather$season_year[monthly_weather$season == \"Winter\" & monthly_weather$season_year %%5 ==0], \n               breaks = monthly_weather$xmin[monthly_weather$season == \"Winter\"& monthly_weather$season_year %%5 ==0]) +\n  theme(axis.text.x = element_text(angle = 25))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nout &lt;- monthly_weather %&gt;%\narrange(date) %&gt;%\nmutate(\nstart_flag = year &gt; 1977,\ncummax = cummax_ignore_na(max, start_flag),\ncummin = cummin_ignore_na(min, start_flag),\nnew_max = cummax == max,\nnew_min = cummin == min\n) %&gt;%\nungroup()\n\nmonthly_weather$new_max &lt;- out$new_max\nmonthly_weather$new_min &lt;- out$new_min\n\nmonthly_weather %&gt;%\nggplot(aes(x = date)) +\n  geom_line(aes(y = min, color = \"min\")) +\n  geom_point(aes(y = min, color = \"min\"), alpha = 0.1) +\n  geom_line(aes(y = max, color = \"max\")) +\n  geom_point(aes(y = max, color = \"max\"), alpha = 0.1) +\n  geom_point(data = filter(monthly_weather, new_max),\n             aes(x = date, y = max, color = \"max\"), size = 6, shape = 17) +\n  geom_point(data = filter(monthly_weather, new_min),\n             aes(x = date, y = min, color = \"min\"), size = 6, shape = 15) +\n  scale_color_manual(values = plot_cols, name = \"Exceedance\\nType\") + \n  scale_x_date(labels = monthly_weather$season_year[monthly_weather$season == \"Winter\" & monthly_weather$season_year %%5 ==0], \n               breaks = monthly_weather$xmin[monthly_weather$season == \"Winter\"& monthly_weather$season_year %%5 ==0]) +\n  theme(axis.text.x = element_text(angle = 25))\n\n\n\n\n\n\n\n\n\n\n\n\nMost of the all time highs occur in summer, and most all-time lows occur in winter. This is unsurprising, and basically a consequence of the statistics we are looking at and the properties of the maximum and the minimum.\n\n\nSeasonal Exceedances\nSince our goal is to summarize data for sonification, we want to make sure the information does not get frontloaded all at the beginning. So, looking at seasonal exceedances gives us more chances to hear extremes.\nNote that the unusually high fall temperatures are both for all time and if we start the “new extreme” timer in 1977.\n\nAll time seasonal exceedanceSeasonal exceedance since 1977\n\n\n\n\nCode\nout_all &lt;- monthly_weather %&gt;%\ngroup_by(season)%&gt;%\narrange(date) %&gt;%\nmutate(\nstart_flag = year &gt; 1899,\ncummax = cummax_ignore_na(max, start_flag),\ncummin = cummin_ignore_na(min, start_flag),\nnew_max = cummax == max,\nnew_min = cummin == min\n) %&gt;%\nungroup()\n\nmonthly_weather$new_max_all_time &lt;- out_all$new_max\nmonthly_weather$new_min_all_time &lt;- out_all$new_min\n\nmonthly_weather %&gt;%\nggplot(aes(x = date)) +\n  geom_line(aes(y = min, color = \"min\")) +\n  geom_point(aes(y = min, color = \"min\"), alpha = 0.1) +\n  geom_line(aes(y = max, color = \"max\")) +\n  geom_point(aes(y = max, color = \"max\"), alpha = 0.1) +\n  geom_point(data = filter(monthly_weather, new_max_all_time),\n             aes(x = date, y = max, color = season), size = 6, shape = 17) +\n  geom_point(data = filter(monthly_weather, new_min_all_time),\n             aes(x = date, y = min, color = season), size = 6, shape = 15) +\n  scale_color_manual(values = plot_cols, name = \"Exceedance\\nType\") + \n  scale_x_date(labels = monthly_weather$season_year[monthly_weather$season == \"Winter\" & monthly_weather$season_year %%5 ==0], \n               breaks = monthly_weather$xmin[monthly_weather$season == \"Winter\"& monthly_weather$season_year %%5 ==0]) +\n  theme(axis.text.x = element_text(angle = 25))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nout &lt;- monthly_weather %&gt;%\ngroup_by(season)%&gt;%\narrange(date) %&gt;%\nmutate(\nstart_flag = year &gt; 1977,\ncummax = cummax_ignore_na(max, start_flag),\ncummin = cummin_ignore_na(min, start_flag),\nnew_max = cummax == max,\nnew_min = cummin == min\n) %&gt;%\nungroup()\n\nmonthly_weather$new_max &lt;- out$new_max\nmonthly_weather$new_min &lt;- out$new_min\n\nmonthly_weather %&gt;%\nggplot(aes(x = date)) +\n  geom_line(aes(y = min, color = \"min\")) +\n  geom_point(aes(y = min, color = \"min\"), alpha = 0.1) +\n  geom_line(aes(y = max, color = \"max\")) +\n  geom_point(aes(y = max, color = \"max\"), alpha = 0.1) +\n  geom_point(data = filter(monthly_weather, new_max),\n             aes(x = date, y = max, color = season), size = 6, shape = 17) +\n  geom_point(data = filter(monthly_weather, new_min),\n             aes(x = date, y = min, color = season), size = 6, shape = 15) +\n  scale_color_manual(values = plot_cols, name = \"Exceedance\\nType\") + \n  scale_x_date(labels = monthly_weather$season_year[monthly_weather$season == \"Winter\" & monthly_weather$season_year %%5 ==0], \n               breaks = monthly_weather$xmin[monthly_weather$season == \"Winter\"& monthly_weather$season_year %%5 ==0]) +\n  theme(axis.text.x = element_text(angle = 25))",
    "crumbs": [
      "Sonification",
      "Data and Processing"
    ]
  },
  {
    "objectID": "data.html#missing-data",
    "href": "data.html#missing-data",
    "title": "Data Sourcing and Processing",
    "section": "Missing Data",
    "text": "Missing Data\nAs you will hear (and see) in the animation, there are occasionally missing data points, resulting in silence!\n\nMonthly level missing data\n\n\nCode\n## code inspired by https://r-graph-gallery.com/79-levelplot-with-ggplot2.html\nx &lt;- monthly_weather$date\ny &lt;- c(\"min\", \"avg\", \"max\")\ndata &lt;- expand.grid(X=x, Y=y)\ndata$Z &lt;- c(ifelse(is.na(monthly_weather$min),\"missing\", \"observed\"),\n            ifelse(is.na(monthly_weather$mean),\"missing\", \"observed\"),\n            ifelse(is.na(monthly_weather$max),\"missing\", \"observed\"))\nn_year &lt;- nrow(monthly_weather)/12\n\nx_breaks &lt;- seq(from = ymd(monthly_weather$date[1]),\n                to = ymd(monthly_weather$date[1392]), \n                length.out = floor(n_year/10))\nx_labs &lt;- year(x_breaks)\n\nchange_date_part_1 &lt;- ymd(\"1910-01-01\")\nchange_date_part_2 &lt;- monthly_weather[which.max(monthly_weather$max),\"date\"] %&gt;% pull()\nchange_date_part_3 &lt;- ymd(\"1977-01-01\")\n  \ndata %&gt;% tibble() %&gt;%\nmutate(X = as.Date(X, \"%Y-%m-%d\"))%&gt;%\n  ggplot(aes(x= X, y=factor(Y), fill = Z)) +\n  geom_tile(height = 0.5) +\n  scale_x_date(breaks = x_breaks, labels = x_labs) +\n  scale_fill_manual(name = \"\",\n    values = c(\"missing\" = \"black\", \"observed\" = \"grey90\")\n  ) + ylab(\"Summary \\nStatistic\") + xlab(\"Year (one line per month)\") +\n theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMissing data hidden by aggregation\n\n\n\n\n\nSince we are looking at monthly level data, presumably, each data point represents the summary (average, max, min) of 28, 29, 30, or 31 data points. However, there are exceptions\n\nMay 2025 values of all 3 summary statistics only include at most 9 points, since the data set was sourced May 9, 2025\n\nMay 9 is based on the date of a raw pdf file I believe I saved using my browser’s print to pdf function\n\nthe NOWData tool only reports the monthly values, and does not indicate whether any of the daily (or lower level data that the daily values may be aggregated from) values were missing.\n\nSo it’s possible some other (besides known May 2025) monthly data points represent fewer values than expected due to missing data. There may be documentation on the NOAA site about this, please let me know if you are aware!",
    "crumbs": [
      "Sonification",
      "Data and Processing"
    ]
  },
  {
    "objectID": "data.html#data-for-sonification",
    "href": "data.html#data-for-sonification",
    "title": "Data Sourcing and Processing",
    "section": "Data for sonification",
    "text": "Data for sonification\nWhile busy, this is a visualization of the entire data set we will be working with for our sonification.\nThe full monthly history of the series is too much for one plot– this is why we want to animate and/or sonify it– to add a time dimension to our perceptualization and allowing us to “zoom in” as we did on the beginning of the series above.\n\n\nCode\nggplot(monthly_weather, aes(x = date)) +\n  geom_line(aes(y = min, color = \"min\")) +\n  geom_point(aes(y = min, color = season)) +\n  geom_line(aes(y = max, color = \"max\")) +\n  geom_point(aes(y = max, color = season)) +\n  geom_line(aes(y = mean, color = \"mean\")) +\n  geom_point(aes(y = mean, color = season)) +\n  geom_point(data = filter(monthly_weather, new_max),\n             aes(x = date, y = max, color = season), size = 6, shape = 17) +\n  geom_point(data = filter(monthly_weather, new_min),\n             aes(x = date, y = min, color = season), size = 6, shape = 15) +\n  scale_color_manual(values = plot_cols) + \n  scale_x_date(labels = monthly_weather$season_year[monthly_weather$season == \"Winter\" & monthly_weather$season_year %%5 ==0], \n               breaks = monthly_weather$xmin[monthly_weather$season == \"Winter\"& monthly_weather$season_year %%5 ==0]) +\n  theme(axis.text.x = element_text(angle = 25))",
    "crumbs": [
      "Sonification",
      "Data and Processing"
    ]
  },
  {
    "objectID": "data.html#output-data",
    "href": "data.html#output-data",
    "title": "Data Sourcing and Processing",
    "section": "Output data",
    "text": "Output data\nThis file is read in at the top of the sonification design details.\n\nsave(monthly_weather, file = \"data/monthly_weather\")\nsave(plot_cols, file = \"data/plot_cols\")",
    "crumbs": [
      "Sonification",
      "Data and Processing"
    ]
  },
  {
    "objectID": "SonifDesign.html",
    "href": "SonifDesign.html",
    "title": "Sonification Design and Music",
    "section": "",
    "text": "Code\nlibrary(gm)\nlibrary(music)\nlibrary(tidyverse)\nlibrary(fpp3)\n\n## read in pre-processed data\nload(\"data/monthly_weather\")\nload(\"data/plot_cols\")",
    "crumbs": [
      "Sonification",
      "Sonification Design"
    ]
  },
  {
    "objectID": "SonifDesign.html#packages",
    "href": "SonifDesign.html#packages",
    "title": "Sonification Design and Music",
    "section": "Packages",
    "text": "Packages\nWe used the ggplot2 package (2016) in R (2021) for visuals, and the gm 1package to make the music (Mao 2024).",
    "crumbs": [
      "Sonification",
      "Sonification Design"
    ]
  },
  {
    "objectID": "SonifDesign.html#splitting-into-parts",
    "href": "SonifDesign.html#splitting-into-parts",
    "title": "Sonification Design and Music",
    "section": "Splitting into parts",
    "text": "Splitting into parts\nAfter a brief conversation with the choreographer, Josh Schneider, it was determined that having all three series (maximum, minimum, average) at once was a bit much for the full history of the data set. As an homage to our shared passion for musical theatre (Josh is the one with credentials beyond high school), we settled on a “three act” (three part) structure. So, we need some cut points for the sonification to define the 3 parts.\nThe first is when the all time high temperature for the entire history of Paso Robles was hit: 117 (F) in August 1933.\nAuditorially, we represent this change by splitting from only tracking the average to tracking both the maximum and the minimum.\nFor the second part, we chose the year that some climate scientists began building models predicting the increasing temperatures we have seen on a global scale (1977). It’s also the year Star Wars came out, so you can choose whichever of those reasons you like better.\n\n\nCode\nchange_date_part_1 &lt;- ymd(\"1910-01-01\") ## the start of the series \nchange_date_part_2 &lt;- monthly_weather[which.max(monthly_weather$max),\"date\"] %&gt;% pull()\nchange_date_part_2_index &lt;- which(monthly_weather$date == change_date_part_2)\nchange_date_part_3 &lt;- ymd(\"1977-01-01\")\nchange_date_part_3_index &lt;-  which(monthly_weather$date == change_date_part_3)",
    "crumbs": [
      "Sonification",
      "Sonification Design"
    ]
  },
  {
    "objectID": "SonifDesign.html#sonification-method",
    "href": "SonifDesign.html#sonification-method",
    "title": "Sonification Design and Music",
    "section": "Sonification method",
    "text": "Sonification method\nAn earlier project on sonifying five number summaries inspired the sonification design, which was in turn inspired by Flowers and Hauer (1993). Additional inspiration came from the work of Peres and Lane (2003) as well as the wonderful Sonification Handbook(2011), in particular, chapter 8.\nSonifcations are generated via the custom function data_to_sonif(), which maps the largest value in the data set to a pre-specified low note, and the highest value to a pre-specified low note, then maps values in between maintaining the spacing between points rounded to the 12 tone equal tempered scale. For example, see how we sonify the five number summary to one octave:\n\n\n\nVisualization of the pitch mapping sonification method.\n\n\n\n\nCode\nsource(\"code/data_to_soniof_all.R\")",
    "crumbs": [
      "Sonification",
      "Sonification Design"
    ]
  },
  {
    "objectID": "SonifDesign.html#part-1-just-averages",
    "href": "SonifDesign.html#part-1-just-averages",
    "title": "Sonification Design and Music",
    "section": "Part 1: Just averages",
    "text": "Part 1: Just averages\nThe averages are sonified to a two octave range by mapping the lowest value to the low pitch of the range and the high note. As specified further below, the average will be played by a viola.\n\n\nCode\n## sonify first and last parts separately (so each part is scaled by its own max and min)\nsonif_all_mean = c(\n  data_to_sonif_all(monthly_weather$mean[1:(change_date_part_2_index-1)], low = 3, high = 4),\n  data_to_sonif_all(monthly_weather$mean[change_date_part_2_index:(change_date_part_3_index-1)], low = 3, high = 4),\n  data_to_sonif_all(monthly_weather$mean[change_date_part_3_index:nrow(monthly_weather)], low = 3, high = 4)\n  )                                   \nsonif_all_mean[change_date_part_2_index:(change_date_part_3_index-1)] &lt;- NA\n\n\npattern = rep(\"eighth\", times = length(sonif_all_mean))\n## lines for avg and max \nline_avg &lt;- Line(pitches = sonif_all_mean, durations = pattern, \n                 name = \"Monthly Average\")",
    "crumbs": [
      "Sonification",
      "Sonification Design"
    ]
  },
  {
    "objectID": "SonifDesign.html#part-2-highs-and-lows",
    "href": "SonifDesign.html#part-2-highs-and-lows",
    "title": "Sonification Design and Music",
    "section": "Part 2: Highs and Lows",
    "text": "Part 2: Highs and Lows\nThe variability of the monthly maximum temperatures is slightly higher than that of the monthly minimum (Range of max: 57, Range of min:53 F; Standard deviation of max, min: 13.27 F, 8.52 F ). To represent this difference auditorially, we allow the maximum to span 3 octaves (C5 to C8) and the minumum to span 2 octaves (C3 to C5). Note that the minimum has the same octave span as the mean, which has a range of 40.5 F and a standard deviation of 9.22 F .\nAs defined below, the maximum is played by a celesta (a keyboard instrument) and the minimum is played by a bassoon.\n\n\nCode\nsonif_all_max = c(\n  data_to_sonif_all(monthly_weather$max[1:(change_date_part_2_index-1)], low = 5, high = 7),\n  data_to_sonif_all(monthly_weather$max[change_date_part_2_index:(change_date_part_3_index-1)], low = 5, high = 7),\n  data_to_sonif_all(monthly_weather$max[change_date_part_3_index:nrow(monthly_weather)], low = 5, high = 7)\n  )   \nsonif_all_max[1:change_date_part_2_index] &lt;- NA ## only average in part 1\n\nline_max &lt;- Line(pitches = sonif_all_max, durations = pattern, \n                 name = \"Monthly Max of Daily Maximum\") ## create the musical line\n\nsonif_all_min = c(\n  data_to_sonif_all(monthly_weather$min[1:(change_date_part_2_index-1)], low = 3, high = 4),\n  data_to_sonif_all(monthly_weather$min[change_date_part_2_index:(change_date_part_3_index-1)], low = 3, high = 4),\n  data_to_sonif_all(monthly_weather$min[change_date_part_3_index:nrow(monthly_weather)], low = 3, high = 4)\n  )   \nsonif_all_min[1:change_date_part_2_index] &lt;- NA\n\nline_min &lt;- Line(pitches = sonif_all_min, durations = pattern, \n                 name = \"Monthly Min of Daily Minimum\")",
    "crumbs": [
      "Sonification",
      "Sonification Design"
    ]
  },
  {
    "objectID": "SonifDesign.html#part-3-exceedances",
    "href": "SonifDesign.html#part-3-exceedances",
    "title": "Sonification Design and Music",
    "section": "Part 3: Exceedances",
    "text": "Part 3: Exceedances\nWhile it is an issue that temperatures on average are increasing, it is not audible on the scales played here since the change is very slow over time. However, the average is not the only statistic available to us, and in times of change we don’t necessarily want an estimate of just “typical” values.\nOne important tool for understanding how the extremes of a time series are changing over time are exceedance occurrances: tracking when a new high or a new low is hit.\nIf we just tracked new all time highs and lows, we would essentially only capture the worst winter/summer. Instead, we start the tracker at 1977 for reasons mentioned above,and track each season (Winter, Spring, Summer, Fall) so we see a sudden influx of “new” maximums and minumums as we begin the tracking, but then once we initialize we can then track when unusually high or low values occurr. I set the pitches at middle C for both to avoid the sonification becoming too busy.\nAs defined later, the exceedances occurrances are played with a viola to elevate the importance of exceedance occurrances as a statistic along with the average, which is also played by the viola.\n\n\nCode\nsonif_all_new_max = rep(NA, times = length(sonif_all_mean))\nsonif_all_new_max[monthly_weather$new_max] &lt;- \"C4\"\nsonif_all_new_min = rep(NA, times = length(sonif_all_mean))\nsonif_all_new_min[monthly_weather$new_max] &lt;- \"C4\"\n\npattern_seas &lt;- rep(\"quarter\", times = length(sonif_all_max))\n\nline_max_new_seas &lt;- Line(pitches = sonif_all_new_max, durations = pattern, name = \"New Seasonal Maximum Reached\")\n\nline_min_new_seas &lt;- Line(pitches = sonif_all_new_max, durations = pattern, name = \"New Seasonal Minimum Reached\")",
    "crumbs": [
      "Sonification",
      "Sonification Design"
    ]
  },
  {
    "objectID": "SonifDesign.html#create-the-music",
    "href": "SonifDesign.html#create-the-music",
    "title": "Sonification Design and Music",
    "section": "Create the music!",
    "text": "Create the music!\nHere is where the instrumentation is actually added, and the music is outputted as an .mp3 file and/or score.\nThe choice of 12/8 time signature means that each measure is 1 year (12 months), with 4 beats felt per measure representing the four seasons, where each month is part of a seasonal triplet.\n\nmusic_all &lt;- Music() + Meter(12, 8) + \n  line_max + line_avg +  line_min + line_max_new_seas + line_min_new_seas + \n     Instrument(9, 1) +  ## monthly max, celesta\n     Instrument(42, 2)  + ## monthly average, viola\n     Instrument(71, 3) +  ## monthly min, bassoon\n     Instrument(42, 4) +  ## new high, viola\n     Instrument(42, 5) +  ## new low, viola\n  Tempo(120) \n\ngm::show(music_all, to = c(\"audio\"))\n\n\n\n\n\n\n\n# gm::export(music_all, \"music_sync.mscz\")\n gm::export(music_all, \"mmmm_sonification_paso_robles.pdf\")",
    "crumbs": [
      "Sonification",
      "Sonification Design"
    ]
  },
  {
    "objectID": "SonifDesign.html#learning-more",
    "href": "SonifDesign.html#learning-more",
    "title": "Sonification Design and Music",
    "section": "Learning more",
    "text": "Learning more\nContact Dr. Julia Schedler with questions or comments! Thanks for perceiving!",
    "crumbs": [
      "Sonification",
      "Sonification Design"
    ]
  },
  {
    "objectID": "SonifDesign.html#footnotes",
    "href": "SonifDesign.html#footnotes",
    "title": "Sonification Design and Music",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe gm package is absolutely delightful and I think anyone who can read music should look at the vignette and make R play their favorite lyric’s melody!↩︎",
    "crumbs": [
      "Sonification",
      "Sonification Design"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Movements of Minimums, Maximums, and Moments",
    "section": "",
    "text": "Please see the other pages on this website for a description of how the data were sourced and the sonification created (animation details are coming!).\nOtherwise, just enjoy the video of the animation (looks better in full screen with the lights off).",
    "crumbs": [
      "Sonification"
    ]
  },
  {
    "objectID": "index.html#learning-more",
    "href": "index.html#learning-more",
    "title": "Movements of Minimums, Maximums, and Moments",
    "section": "Learning more",
    "text": "Learning more\nContact Dr. Julia Schedler with questions or comments! Thanks for perceiving!",
    "crumbs": [
      "Sonification"
    ]
  },
  {
    "objectID": "animation.html",
    "href": "animation.html",
    "title": "Animation",
    "section": "",
    "text": "The animation was created using ggplot2 in R.\nThe data set has 1392 rows, corresponding to each month. However, the sonification lasts about 348 seconds, which means that if we just created a frame containing the plot for each incremental month we would have a frame rate of 1392/348 = 4 frames per second.\n4fps is abysmal, so each month actually has 7 or 8 frames each. These frames show the same data but slowly pan over the x-axis to create a nice, smooth panning effect in the final animation.\nI will share fully reproducible code when I clean it up a bit– here’s the gist:",
    "crumbs": [
      "Sonification",
      "Animation Design"
    ]
  },
  {
    "objectID": "animation.html#how-long-is-the-sonification",
    "href": "animation.html#how-long-is-the-sonification",
    "title": "Animation",
    "section": "How long is the sonification?",
    "text": "How long is the sonification?\nWe start with the audio file generated in “Sonification Design” and build an animation to accompany it.\n\nffmpeg -i music_all_parts_sat.mp3 -t 348 -c:a libmp3lame -b:a 192k trimmed_music_new_T.mp3\nffprobe -v error -show_entries format=duration -of csv=\"p=0\" trimmed_music_new_T.mp3 &gt; audio_duration.txt",
    "crumbs": [
      "Sonification",
      "Animation Design"
    ]
  },
  {
    "objectID": "animation.html#define-colors-for-the-visualization",
    "href": "animation.html#define-colors-for-the-visualization",
    "title": "Animation",
    "section": "Define colors for the visualization",
    "text": "Define colors for the visualization\n\nlibrary(tidyverse)\nlibrary(gganimate)\n\n## load the data used to create the sonification\nload(\"data/monthly_weather\")\nn &lt;- nrow(monthly_weather)\n\n## set colors to be used throughout \ncols &lt;- c(\"max\" = \"red\", \"min\" = \"blue\", \"mean\"=\"grey\", \"Winter\" = \"#2f77c3\", \"Spring\" = \"#61bf9a\", \"Summer\" = \"#f94994\", \"Fall\" =  \"#eb9911\")\n\nmonthly_weather$min_col &lt;- \"blue\"\nmonthly_weather$min_col[1:which.max(monthly_weather$max)] &lt;-  NA\nmonthly_weather$max_col &lt;- \"red\"\nmonthly_weather$max_col[1:which.max(monthly_weather$max)] &lt;-  NA\nmonthly_weather$avg_col &lt;- \"grey\"\nmonthly_weather$avg_col[which.max(monthly_weather$max):(min(which(monthly_weather$year ==1977))-1)] &lt;- NA\n\n## i think i don't need this but keeping until I verify FIXME\n# monthly_weather$window_start = c(rep(1909, times = 60), monthly_weather$year[61:n]-4)\n# monthly_weather$window_end = c(rep(1913, times = 60), monthly_weather$year[61:n]+1)\n\nopacity_matrix &lt;- matrix(rep(\"#00000000\", times = n^2), nrow = n)\ncolor_matrix &lt;- matrix(rep(\"#00000000\", times = n^2), nrow = n)\n\n## Want the opacity of the points to fade out\n## current season is entire\n## last season is 90\n## half year is 80\n## three is 70\n## year ago is 50\n## y ls 40\n## y hy 30\n## y 3s 20\n## 2y 10\n## otherwise 00\n## each row is a frame\n\n\n## Generate opacity matrix\nfor(i in 3:nrow(monthly_weather)){\n  current_season = which(monthly_weather$season_label == monthly_weather$season_label[i])\n  \n  color_matrix[i,1:i] &lt;- monthly_weather$season_color[1:i]\n                          \n  season_window &lt;- data.frame(\n  last_season_end = min(current_season)-c(1, 4, 7, 10, 13, 16, 19, 22),\n  last_season_start = min(current_season)-c(3, 6, 9, 12, 15, 18, 21, 24), \n  opacity = c(90, 80, 70, 50, 40, 30 , 20 , 10)\n  )\n  #if i &lt;24, need to truncate window\n  # only go back floor(i / 3) or current\n  \n  if(i&lt;25){\n    season_window &lt;- season_window[1:floor(i/3),]\n    season_window$last_season_start[season_window$last_season_start ==0] = 1\n  }\n  \n  for(j in 1:nrow(season_window)){\n    idx &lt;- season_window$last_season_start[j]:season_window$last_season_end[j]\n    opacity_matrix[i,idx] &lt;- paste0(color_matrix[i,idx], \n           rep(season_window$opacity[j], times = length(color_matrix[i,idx])))\n  }\n  opacity_matrix[i, current_season] &lt;- color_matrix[i,current_season] \n}\nopacity_matrix[1,1] &lt;- monthly_weather$season_color[1]\nopacity_matrix[2, 1:2] &lt;- monthly_weather$season_color[1:2]",
    "crumbs": [
      "Sonification",
      "Animation Design"
    ]
  },
  {
    "objectID": "animation.html#getting-the-frame-rate-correct",
    "href": "animation.html#getting-the-frame-rate-correct",
    "title": "Animation",
    "section": "Getting the frame rate correct",
    "text": "Getting the frame rate correct\nNote that the audio appears to be at 80bpm rate for some confusing 12/8 reason and/or a MuseScore bug.\nWe want to have one year = 4 beats. Each beat is a season, and each month is 1/3 of a beat, since they are grouped into triplets.\nSince each beat is 3 data points, this means that each frame should last 0.75/3 = 0.25 seconds in order for things to sync up and give us a video that is 30fps. We want a total of 10440 = 348*30 frames (n frames), where each frame is shown for 0.25 seconds (80 bpm implies 4/3 beats per second which means each beat lasts 0.75 seconds).\nSo, we need 10440 frames but only have 1392 data points. Unfortunately for me, 10440/1392 = 7.5 frames per month (per data point), and we can’t have half a frame. So, we need half of the months to have 8 frames and half of the months to have 7. I used some support from ChatGPT on this part, although it did initially suggest I do all 8 frames followed by all 7 frames, which meant the animation slowly got out of sync with the audio (I figured out why on my own, though!).\nWe can also have more duplicates of frames to increase the frame rate and make it look smoother (i.e. 60fps), but will start with this.\nIn addition, these frames complicate the panning as well. If we just had 7 or 8 frames exactly the same, it would still look choppy and just have an unnecesarily large file size. So, I dynamically updated the plot limits to plan across the x-axis even while the monthly data point is fixed.\n\n## starting frame:\nstart_date &lt;- as.Date(\"1910-01-01\")\nend_date &lt;- as.Date(\"2025-12-01\")\nn_frames &lt;- 10440\n\nn_data &lt;- n\n\nframe_counts &lt;- rep(c(8,7), length.out = n_data) ## alternate 8 and 7 frames so audio does not get out of sync\n\nnow = NULL\nfor(i in 1:n_data){\n  now = c(now, rep(i, times = frame_counts[i]))\n}\n\n# Create a sequence of 'center' dates over the full data span\nframe_positions &lt;- scales::rescale(1:n_frames, to = c(1, nrow(monthly_weather)))\n\ncenter_dates &lt;- as.Date(\n  approx(x = seq_along(monthly_weather$date), \n         y = as.numeric(monthly_weather$date), \n         xout = frame_positions)$y,\n  origin = \"1970-01-01\"\n)\n\n\nwindow_width_days &lt;- 365.25 * 5  # approx 5 years\nhalf_window &lt;- window_width_days / 2\n\nwindow_starts &lt;- center_dates - half_window\nwindow_ends   &lt;- center_dates + half_window\n\n\n## check windows\nwindow_frame &lt;- data.frame(\n  window_starts, \n  monthly_weather$date[now],\n  center_dates,\n  window_ends, \n  window_ends &lt;center_dates, \n  window_ends &lt; monthly_weather$date[now]\n)",
    "crumbs": [
      "Sonification",
      "Animation Design"
    ]
  },
  {
    "objectID": "animation.html#creating-the-frames",
    "href": "animation.html#creating-the-frames",
    "title": "Animation",
    "section": "Creating the frames",
    "text": "Creating the frames\nUsing some parallelization, I generated the very many frames and dumped them all into a folder with their filenames in order.\nI was getting down to the wire, so ChatGPT also helped me set up the parallelization. The plotting code was designed and iterated on by me (with some occasional help from ChatGPT if I was unsucccessful at fixing errors the “old fashioned” way– by trying to figure it out, then Googling.)\n\nlibrary(future.apply)\nlibrary(progressr)\n\nplan(multisession, workers = parallel::detectCores() - 1)\nhandlers(global = TRUE)\nhandlers(\"txtprogressbar\")  # or \"progress\", \"cli\", etc.\n\nwith_progress({\n  p &lt;- progressor(along = 1:n_frames)\n\n  future_lapply(1:n_frames, function(frame) {\n    monthly_weather$point_cols_min &lt;- monthly_weather$point_cols_max &lt;- monthly_weather$point_cols_avg&lt;- opacity_matrix[now[frame],]\n  monthly_weather$point_cols_min[1:which.max(monthly_weather$max)] &lt;-  NA\n  monthly_weather$point_cols_max[1:which.max(monthly_weather$max)] &lt;-  NA\n  monthly_weather$point_cols_avg[which.max(monthly_weather$max):(min(which(monthly_weather$year ==1977))-1)] &lt;- NA\n  \n  ## set up windows for plot\n  plot_dat &lt;- monthly_weather[1:now[frame],] %&gt;%\n  filter(date &gt;= window_starts[frame], date &lt;= window_ends[frame])\n  plot_start &lt;- window_starts[frame]\n  plot_end &lt;- window_ends[frame]\n  plot_lim &lt;- c(plot_start, plot_end)  \n\n\n  \n  plot_curr &lt;-  plot_dat %&gt;%\n    ggplot(aes(x = date))+\n    geom_segment(data = monthly_weather[1:now[frame],] %&gt;% filter(new_max), aes(x = date-2, xend = date+2, y =max, yend = 120, col = paste0(substr(point_cols_max, 1, 7), \"70\")), linewidth = 5 ) + \n    geom_text(data = monthly_weather[1:now[frame],] %&gt;% filter(new_max), aes(xintercept = date, col = substr(point_cols_max, 1, 7), y = 127, label = \"New \\n High\"), size = 10 ) + \n    geom_segment(data = monthly_weather[1:now[frame],] %&gt;% filter(new_min), aes(x = date-2, xend = date+2, y =-5, yend = min, col = paste0(substr(point_cols_max, 1, 7), \"70\")), linewidth = 5 ) + \n    geom_text(data = monthly_weather[1:now[frame],] %&gt;% filter(new_min), aes(xintercept = date, col = substr(point_cols_max, 1, 7), y = -10, label = \"New \\nLow\"), size = 10 ) + \n    geom_line(aes(y = min, color = min_col), linewidth=2) +\n    geom_point(aes(y = min, color = point_cols_min), size = 5) +\n    geom_line(aes(y = max, color = max_col), linewidth=2) +\n    geom_point(aes(y = max, color = point_cols_max), size = 5) +\n    geom_line(aes(y = mean, color = avg_col), linewidth=2) +\n    geom_point(aes(y = mean, color = point_cols_avg), size = 5) +\n    scale_color_identity(name = NULL, guide=\"none\") + \n    theme(axis.text.x = element_text(angle = 25)) +\n    coord_cartesian(xlim = plot_lim) + \n    ggtitle(paste(format(monthly_weather$date[now[frame]], \"%Y\")), \n                                subtitle = monthly_weather$season[now[frame]]) + \n    ylab(\"Temperature (F)\") + xlab(\"Time\") + theme_void(base_size = 12) +\n    theme(\n        plot.background = element_rect(fill = \"grey25\", color = NA),\n        panel.background = element_rect(fill = \"grey25\", color = NA),\n        panel.border = element_blank(),\n        axis.text = element_text(color = \"grey90\"),\n        axis.title = element_text(color = \"grey90\", size = 40),\n        plot.title = element_text(color = \"grey90\", size = 50),\n        axis.ticks.y = element_line(color = \"grey90\"),\n        panel.grid = element_blank(), \n        axis.text.x = element_blank(),\n        axis.text.y = element_text(size = 40, margin = margin(r = 5)),\n        axis.ticks.x = element_blank(), \n        axis.line = element_line(color = \"grey90\"),\n        axis.title.y = element_text(size = 70),\n        axis.title.x = element_text(size = 40),\n        axis.ticks.length = unit(0.25, \"cm\"),         \n        axis.ticks = element_line(size = 1.2), \n        plot.subtitle = element_text(color = monthly_weather$season_color[now[frame]], hjust = 1, margin = margin(r=15), size = 50)\n    )  + \n    scale_y_continuous(breaks = c(0, 25, 50, 75, 100), limits = c(-10, 127))\n  \n    \n  png(sprintf(\"animation/frame_%05d.png\", frame), width = 3840,       # in pixels\n        height = 2160,      # in pixels\n        res = 150,          # dots per inch\n        units = \"px\"    \n      )\n  \n   print(plot_curr)\n   \n   grid.text(\n    \"Min Temp\", \n    x = unit(0.85, \"npc\") - unit(10, \"pt\"),  # 10pt from the right edge\n    y = unit(0.3, \"npc\"),                 \n    just = \"right\",\n    gp = gpar(col = \"blue\", fontsize = 40)\n)\n   \n   grid.text(\n    \"Max Temp\", \n    x = unit(0.85, \"npc\") - unit(10, \"pt\"),  # 10pt from the right edge\n    y = unit(0.7, \"npc\"),                 \n    just = \"right\",\n    gp = gpar(col = \"red\", fontsize = 40)\n)\n   grid.text(\n    \"Avg Temp\", \n    x = unit(0.85, \"npc\") - unit(10, \"pt\"),  # 10pt from the right edge\n    y = unit(0.5, \"npc\"),                 \n    just = \"right\",\n    gp = gpar(col = \"grey\", fontsize = 40)\n)\n   \n   dev.off()\n   \n\n# update date\n    p(sprintf(\"Frame %d\", frame))  # notify progress bar\n    NULL  # or return something if needed\n  },future.packages = c(\"ggplot2\", \"dplyr\"), future.globals = TRUE)\n})",
    "crumbs": [
      "Sonification",
      "Animation Design"
    ]
  },
  {
    "objectID": "animation.html#create-the-video",
    "href": "animation.html#create-the-video",
    "title": "Animation",
    "section": "Create the video",
    "text": "Create the video\nThis creates an animation without any sound.\n\nffmpeg -r 30 -start_number 1 -i animation/frame_%05d.png \\\n-c:v libx264 -pix_fmt yuv420p \\\n-movflags +faststart \\\nanimation_only_PENUL2.mp4",
    "crumbs": [
      "Sonification",
      "Animation Design"
    ]
  },
  {
    "objectID": "animation.html#sync-audio",
    "href": "animation.html#sync-audio",
    "title": "Animation",
    "section": "Sync audio",
    "text": "Sync audio\nJust to be sure, we trim the music and format it as an .m4a because for some reason I don’t really understand that works better.\nThen, ffmpeg creates the final animation and sonification as an .mp4 file.\n\nffmpeg -i trimmed_music_new_T.mp3 -t 348.000000 -c:a aac -movflags +faststart trimmed_music_final.m4a\n\n\nffmpeg -i animation_only_PENUL2.mp4 -i trimmed_music_final.m4a \\\n-c:v copy -c:a aac -movflags +faststart -shortest \\\nanimation_synced_PENUL2.mp4",
    "crumbs": [
      "Sonification",
      "Animation Design"
    ]
  },
  {
    "objectID": "data_backup.html",
    "href": "data_backup.html",
    "title": "Data Sourcing and Processing",
    "section": "",
    "text": "For monthly temperature data, this file shows: - data sourcing process, - exploration of temporal structure - creation of summary statistics - outputting of raw data for sonification\nCode\nlibrary(tidyverse)\nlibrary(kableExtra)\nlibrary(htmlTable)\nlibrary(gt)\nsource(\"code/cummax_ignore_na.R\")\nsource(\"code/cummin_ignore_na.R\")"
  },
  {
    "objectID": "data_backup.html#data-source",
    "href": "data_backup.html#data-source",
    "title": "Data Sourcing and Processing",
    "section": "Data Source",
    "text": "Data Source\nThree data sets were downloaded from the NOAA National Weather service NOWData tool.\nAll data sets are for Paso Robles, CA, from the start of data collection (“por”) to present (2025).\n\n\n\nNOAA NOW Data map tool visualizing location of data source in Paso Robles, CA\n\n\nWe requested the monthly maximums, monthly minimums, and monthly averages.\n After clicking “Go”, a data table pops up. We copied it and pasted into Microsoft Excel, removed the summary rows included at the bottom, then saved as a csv.\nThis process yielded 3 csv files: paso_max.csv, paso_min.csv, and paso_avg.csv."
  },
  {
    "objectID": "data_backup.html#process-data",
    "href": "data_backup.html#process-data",
    "title": "Data Sourcing and Processing",
    "section": "Process Data",
    "text": "Process Data\nRead in, combine, and process data from the csv files obtained above.\nThis gets us three monthly time series, which we can visualize.\n\n\nCode\nplot_cols &lt;- c(\"max\" = \"red\", \"min\" = \"blue\", \"mean\"=\"grey\", \"Winter\" = \"#2f77c3\", \"Spring\" = \"#61bf9a\", \"Summer\" = \"#f94994\", \"Fall\" =  \"#eb9911\")\n\nmonthly_weather %&gt;% \n  ggplot(aes(x = date)) +\n  geom_line(aes(y = min, col = \"min\")) + \n  geom_line(aes(y = max, col = \"max\")) + \n  geom_line(aes(y = mean, col = \"mean\")) + \n  scale_color_manual(values = plot_cols)\n\n\n\n\n\n\n\n\n\nSince there is a big gap in the data after the beginning of the series, we will start the sonification after that period.\n\n\nCode\nmonthly_weather &lt;- monthly_weather %&gt;% filter(year&gt;1909)\nmonthly_weather %&gt;% \n  ggplot(aes(x = date)) +\n  geom_line(aes(y = min, col = \"min\")) + \n  geom_line(aes(y = max, col = \"max\")) + \n  geom_line(aes(y = mean, col = \"mean\")) + \n  scale_color_manual(values = plot_cols)\n\n\n\n\n\n\n\n\n\n\nSeasonal Data\nAlso, since the data is a bit noisy, let’s look at some seasonal summaries for each series as well.\n\n\nCode\nmonthly_weather &lt;- monthly_weather %&gt;% \n  mutate(\n    season = case_when(\n      month %in% c(\"Dec\", \"Jan\", \"Feb\") ~ \"Winter\",\n      month %in% c(\"Mar\", \"Apr\", \"May\")  ~ \"Spring\",\n      month %in% c(\"June\", \"July\", \"Aug\")  ~ \"Summer\",\n      month %in% c(\"Sept\", \"Oct\", \"Nov\") ~ \"Fall\"\n  ),\n  season_color = case_when(\n      month %in%  c(\"Dec\", \"Jan\", \"Feb\")  ~ \"#2f77c3\",\n      month %in% c(\"Mar\", \"Apr\", \"May\")  ~ \"#61bf9a\",\n      month %in% c(\"June\", \"July\", \"Aug\")  ~ \"#f94994\",\n      month %in% c(\"Sept\", \"Oct\", \"Nov\") ~ \"#eb9911\"\n  ), \n  season_year = case_when(\n      month == \"Dec\" ~ year + 1,  # December belongs to *next* Jan/Feb\n      .default = year\n  ),\n    season_label = paste(season, season_year)\n  ) %&gt;%   \n  group_by(season, year) %&gt;%\n  ungroup()  \n\n\nmonthly_weather &lt;- monthly_weather %&gt;%\n  group_by(season_label, season_year) %&gt;%\n  mutate(\n    xmin = min(date),\n    xmax = max(date),\n    seas_avg = mean(mean),\n    seas_max = max(max),\n    seas_min = min(min),\n    season_color = unique(season_color),\n    season = unique(season)\n  ) %&gt;%\n  ungroup()\n\nmonthly_weather \n\n\n# A tibble: 1,392 × 15\n    year month   min  mean   max date       season season_color season_year\n   &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;date&gt;     &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n 1  1910 Jan      21  44.7    72 1910-01-01 Winter #2f77c3             1910\n 2  1910 Feb      18  48.2    75 1910-02-01 Winter #2f77c3             1910\n 3  1910 Mar      31  55.6    86 1910-03-01 Spring #61bf9a             1910\n 4  1910 Apr      35  59.3    99 1910-04-01 Spring #61bf9a             1910\n 5  1910 May      30  63.5   110 1910-05-01 Spring #61bf9a             1910\n 6  1910 June     34  65     105 1910-06-01 Summer #f94994             1910\n 7  1910 July     36  69.4   109 1910-07-01 Summer #f94994             1910\n 8  1910 Aug      36  67.6   106 1910-08-01 Summer #f94994             1910\n 9  1910 Sept     35  66.1   105 1910-09-01 Fall   #eb9911             1910\n10  1910 Oct      32  61.7   104 1910-10-01 Fall   #eb9911             1910\n# ℹ 1,382 more rows\n# ℹ 6 more variables: season_label &lt;chr&gt;, xmin &lt;date&gt;, xmax &lt;date&gt;,\n#   seas_avg &lt;dbl&gt;, seas_max &lt;int&gt;, seas_min &lt;int&gt;\n\n\n\n\n\n\n\n\nMeans and Standard Deviations\n\n\n\n\n\n\n\n\n\nAll time\n\n\n\n\n\n\nHistogramsBoxplotsTable\n\n\n\n\nCode\nsummary_table_all &lt;- monthly_weather %&gt;% \n  summarise(\n    ## mean \n    Min_mean = mean(min, na.rm = T), \n    Mean_mean = mean(mean, na.rm = T), \n    Max_mean = mean(max, na.rm = T), \n    ## sd\n    Min_sd = sd(min, na.rm = T),\n    Mean_sd = sd(mean, na.rm = T),\n    Max_sd = sd(max, na.rm = T),\n    ## max \n    Min_max = max(min, na.rm = T),\n    Mean_max = max(mean, na.rm = T),\n    Max_max = max(max, na.rm = T),\n    ## min\n    Min_min = min(min, na.rm = T),\n    Mean_min = min(mean, na.rm = T),\n    Max_min = min(max, na.rm = T),\n  )\n\n## chat help\n\nfacet_vars &lt;- c(\"min\", \"mean\", \"max\")\n\n# Step 1: Pivot your summary table\nvline_data &lt;- summary_table_all %&gt;%\n  pivot_longer(cols = contains(c(\"Min_mean\", \"Mean_mean\", \"Max_mean\")),\n               names_to = \"name\", values_to = \"xintercept\") \nvline_data$name = facet_vars\n\n\nmonthly_weather %&gt;%\n  bind_cols(summary_table_all[rep(1, nrow(monthly_weather)), ]) %&gt;%\n  select(-c(xmin, xmax)) %&gt;%\n  pivot_longer(cols = contains(c(\"min\", \"mean\", \"max\"))) %&gt;%\n  filter(name %in% facet_vars) %&gt;%\n  select(year, month, date, season, name, value) %&gt;%\n  ggplot(aes(x = value, fill = name)) +\n  geom_histogram(bins = 30) +\n  geom_vline(\n    data = vline_data,\n    aes(xintercept = xintercept),\n    color = \"white\", linewidth = 1, linetype = \"dashed\"\n  ) +\n  facet_grid(name~., scales = \"fixed\") +\n  theme_minimal() +\n  scale_fill_manual(values = plot_cols)\n\n\nWarning: Removed 60 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n## chat help\n\nfacet_vars &lt;- c(\"min\", \"mean\", \"max\")\n\n# Step 1: Pivot your summary table\nvline_data &lt;- summary_table_all %&gt;%\n  pivot_longer(cols = contains(c(\"Min_mean\", \"Mean_mean\", \"Max_mean\")),\n               names_to = \"name\", values_to = \"xintercept\") \nvline_data$name = facet_vars\n\n\nmonthly_weather %&gt;%\n  bind_cols(summary_table_all[rep(1, nrow(monthly_weather)), ]) %&gt;%\n  select(-c(xmin, xmax)) %&gt;%\n  pivot_longer(cols = contains(c(\"min\", \"mean\", \"max\"))) %&gt;%\n  filter(name %in% facet_vars) %&gt;%\n  select(year, month, date, season, name, value) %&gt;%\n  ggplot(aes(x = value, fill = name)) +\n  geom_boxplot() +\n  geom_vline(\n    data = vline_data,\n    aes(xintercept = xintercept),\n    color = \"white\", linewidth = 1, linetype = \"dashed\"\n  ) +\n  facet_grid(name~., scales = \"fixed\") +\n  theme_minimal() +\n  scale_fill_manual(values = plot_cols)\n\n\nWarning: Removed 60 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table_all %&gt;%\ngt() %&gt;%\n  tab_header(\n    title = \"All-time Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    Min_mean = \"Mean\", \n    Min_sd = \"SD\", \n    Mean_mean = \"Mean\", \n    Mean_sd = \"SD\", \n    Max_mean = \"Mean\",\n    Max_sd = \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(Min_mean, Min_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(Mean_mean, Mean_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(Max_mean, Max_sd)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Summaries\n\n\n\nMonthly Minimums\n\n\nMonthly Means\n\n\nMonthly Maximums\n\nMin_max\nMean_max\nMax_max\nMin_min\nMean_min\nMax_min\n\n\nMean\nSD\nMean\nSD\nMean\nSD\n\n\n\n\n32.19\n8.54\n59.08\n9.21\n90.75\n13.21\n53.00\n78.30\n117.00\n0.00\n37.80\n60.00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy time unit (month, season, year)\n\n\n\n\n\n\n\n\n\n\n\nMonthly\n\n\n\n\n\n\nPlot (aggregated)Plot (raw)Table\n\n\n\n\nCode\nmonth.abb = c(\"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\" , \"June\", \"July\", \"Aug\",  \"Sept\", \"Oct\",  \"Nov\") \nsummary_table &lt;- monthly_weather %&gt;% \n  mutate(month = factor(month, levels = month.abb)) %&gt;%\n  group_by(month) %&gt;%\n  summarise(\n    Min_mean = mean(min, na.rm = T), \n    Min_sd = sd(min, na.rm = T),\n    Mean_mean = mean(mean, na.rm = T), \n    Mean_sd = sd(mean, na.rm = T),\n    Max_mean = mean(max, na.rm = T), \n    Max_sd = sd(max, na.rm = T)\n  ) %&gt;%\n  arrange(month)\n\nplot_cols &lt;- c(plot_cols, \"Min_mean\" = \"blue\", \"Mean_mean\" = \"grey\", \"Max_mean\" = \"red\")\n\nagg_plot&lt;- summary_table %&gt;% \n  ggplot(aes(x = month)) + \n  geom_line(aes(y = Min_mean, col = \"Min_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Max_mean, col = \"Max_mean\", group = 1), linewidth = .75) + \n  geom_point(aes(y = Min_mean, col = \"Min_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Max_mean, col = \"Max_mean\", group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  ylab(\"Temperature (F)\")+ xlab(\"Month\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + ylim(c(0,120))\n\nagg_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nagg_plot + \n  geom_point(data = monthly_weather, aes(x = month, y = min, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = month, y = mean, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = month, y = max, col = season), alpha = 0.1, position = position_jitter())  +\n  ylab(\"Temperature (F)\")+ xlab(\"Month\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + \n  ylim(c(0,120))\n\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 41 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 9 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"All-time Monthly Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    Min_mean = \"Mean\", \n    Min_sd = \"SD\", \n    Mean_mean = \"Mean\", \n    Mean_sd = \"SD\", \n    Max_mean = \"Mean\",\n    Max_sd = \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(Min_mean, Min_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(Mean_mean, Mean_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(Max_mean, Max_sd)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Monthly Summaries\n\n\nmonth\n\nMonthly Minimums\n\n\nMonthly Means\n\n\nMonthly Maximums\n\n\n\nMean\nSD\nMean\nSD\nMean\nSD\n\n\n\n\nDec\n21.37\n4.43\n47.04\n2.45\n73.26\n4.48\n\n\nJan\n21.78\n5.45\n47.08\n2.72\n72.90\n4.52\n\n\nFeb\n25.44\n4.23\n50.13\n2.61\n76.10\n4.92\n\n\nMar\n29.26\n3.71\n53.12\n2.72\n81.49\n5.23\n\n\nApr\n31.68\n3.26\n56.89\n2.58\n89.21\n5.54\n\n\nMay\n35.71\n3.32\n61.89\n2.52\n96.37\n4.85\n\n\nJune\n39.79\n3.33\n67.56\n2.55\n103.62\n4.08\n\n\nJuly\n43.24\n3.27\n71.86\n2.32\n106.93\n3.43\n\n\nAug\n42.75\n3.55\n71.57\n2.06\n105.81\n3.37\n\n\nSept\n39.23\n3.74\n68.46\n2.40\n103.51\n4.57\n\n\nOct\n31.74\n4.32\n61.47\n2.50\n96.13\n4.46\n\n\nNov\n24.77\n4.42\n52.73\n2.31\n84.33\n4.93\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYearly\n\n\n\n\n\n\nPlot (aggregated)Plot (raw)Table\n\n\n\n\nCode\nsummary_table &lt;- monthly_weather %&gt;% \n  group_by(year) %&gt;%\n  summarise(\n    Min_mean = mean(min, na.rm = T), \n    Min_sd = sd(min, na.rm = T),\n    Mean_mean = mean(mean, na.rm = T), \n    Mean_sd = sd(mean, na.rm = T),\n    Max_mean = mean(max, na.rm = T), \n    Max_sd = sd(max, na.rm = T)\n  ) %&gt;%\n  arrange(year)\n\n\nsummary_table %&gt;% \n  ggplot(aes(x = year)) + \n  geom_line(aes(y = Min_mean, col = \"Min_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Max_mean, col = \"Max_mean\", group = 1), linewidth = .75) + \n  geom_point(aes(y = Min_mean, col = \"Min_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Max_mean, col = \"Max_mean\", group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  ylab(\"Temperature (F)\")+ xlab(\"Year\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + ylim(c(0,120))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;% \n  ggplot(aes(x = year)) + \n  geom_line(aes(y = Min_mean, col = \"Min_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Max_mean, col = \"Max_mean\", group = 1), linewidth = .75) + \n  geom_point(aes(y = Min_mean, col = \"Min_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Max_mean, col = \"Max_mean\", group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  geom_point(data = monthly_weather, aes(x = year, y = min, col = \"min\"), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = year, y = mean, col = \"mean\"), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = year, y = max, col = \"max\"), alpha = 0.1, position = position_jitter()) +\n  ylab(\"Temperature (F)\")+ xlab(\"Year\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5))+ ylim(c(0, 120))\n\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 41 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 9 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"All-time Yearly Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    Min_mean = \"Mean\", \n    Min_sd = \"SD\", \n    Mean_mean = \"Mean\", \n    Mean_sd = \"SD\", \n    Max_mean = \"Mean\",\n    Max_sd = \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(Min_mean, Min_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(Mean_mean, Mean_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(Max_mean, Max_sd)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Yearly Summaries\n\n\nyear\n\nMonthly Minimums\n\n\nMonthly Means\n\n\nMonthly Maximums\n\n\n\nMean\nSD\nMean\nSD\nMean\nSD\n\n\n\n\n1,910.00\n28.42\n7.99\n58.51\n8.41\n94.83\n14.06\n\n\n1,911.00\n28.58\n8.77\n56.71\n8.74\n90.83\n13.49\n\n\n1,912.00\n27.33\n9.18\n56.86\n8.61\n88.67\n14.58\n\n\n1,913.00\n27.17\n10.62\n58.06\n9.85\n93.08\n14.08\n\n\n1,914.00\n30.33\n6.58\n58.56\n7.45\n91.50\n13.61\n\n\n1,915.00\n29.92\n8.07\n58.77\n8.86\n91.58\n14.76\n\n\n1,916.00\n27.50\n9.29\n57.80\n10.24\n90.25\n15.69\n\n\n1,917.00\n28.58\n8.13\n58.87\n11.25\n94.00\n15.83\n\n\n1,918.00\n30.25\n9.51\n58.49\n10.57\n92.50\n12.08\n\n\n1,919.00\n29.42\n8.13\n57.98\n9.92\n90.33\n15.26\n\n\n1,920.00\n33.75\n7.03\n57.73\n9.14\n88.67\n15.80\n\n\n1,921.00\n32.58\n7.76\n58.90\n9.06\n91.75\n12.64\n\n\n1,922.00\n30.83\n7.69\n57.67\n10.96\n86.58\n16.36\n\n\n1,923.00\n32.50\n8.47\n57.87\n9.34\n90.25\n14.04\n\n\n1,924.00\n31.00\n9.50\n58.18\n8.74\n90.08\n13.61\n\n\n1,925.00\n33.00\n6.58\n58.41\n8.00\n90.83\n14.17\n\n\n1,926.00\n35.08\n5.55\n60.21\n9.04\n91.83\n12.90\n\n\n1,927.00\n33.75\n6.08\n58.90\n8.68\n89.67\n13.83\n\n\n1,928.00\n33.50\n7.54\n59.61\n8.99\n91.83\n15.09\n\n\n1,929.00\n32.25\n8.01\n59.01\n10.11\n91.83\n15.07\n\n\n1,930.00\n33.42\n7.04\n58.64\n8.75\n90.50\n12.82\n\n\n1,931.00\n34.58\n7.51\n60.32\n10.43\n92.50\n14.62\n\n\n1,932.00\n32.58\n7.50\n58.08\n10.51\n91.00\n15.50\n\n\n1,933.00\n31.25\n7.84\n57.62\n10.34\n91.42\n17.55\n\n\n1,934.00\n33.67\n4.72\n59.38\n8.46\n91.25\n13.88\n\n\n1,935.00\n31.33\n7.64\n57.05\n10.23\n88.92\n13.81\n\n\n1,936.00\n33.17\n7.07\n59.06\n10.14\n89.75\n15.60\n\n\n1,937.00\n32.50\n8.82\n58.11\n11.21\n88.67\n16.07\n\n\n1,938.00\n32.67\n8.80\n58.19\n9.33\n88.50\n14.57\n\n\n1,939.00\n31.50\n6.60\n59.02\n9.81\n90.75\n14.08\n\n\n1,940.00\n31.67\n9.31\n60.33\n7.93\n91.83\n14.10\n\n\n1,941.00\n32.17\n7.93\n60.15\n7.14\n89.08\n12.69\n\n\n1,942.00\n30.83\n9.07\n59.01\n10.14\n91.58\n14.54\n\n\n1,943.00\n31.25\n8.02\n59.49\n7.81\n92.33\n11.97\n\n\n1,944.00\n30.75\n6.65\n58.53\n8.65\n90.67\n14.39\n\n\n1,945.00\n29.33\n8.26\n58.66\n9.54\n91.67\n14.36\n\n\n1,946.00\n29.25\n9.36\n58.10\n10.10\n89.92\n13.83\n\n\n1,947.00\n29.75\n9.24\n59.31\n10.12\n93.67\n13.58\n\n\n1,948.00\n27.67\n10.33\n57.59\n9.64\n90.42\n13.67\n\n\n1,949.00\n29.25\n10.22\n57.54\n10.69\n89.50\n15.71\n\n\n1,950.00\n30.75\n8.79\n59.83\n8.01\n92.92\n13.89\n\n\n1,951.00\n30.42\n8.07\n58.34\n9.29\n90.67\n14.69\n\n\n1,952.00\n31.92\n7.04\n59.19\n9.89\n91.17\n12.68\n\n\n1,953.00\n29.67\n9.27\n58.98\n8.78\n91.50\n10.47\n\n\n1,954.00\n29.33\n8.35\n58.98\n9.01\n91.42\n13.45\n\n\n1,955.00\n29.42\n7.14\n57.89\n9.51\n90.17\n13.32\n\n\n1,956.00\n30.42\n8.69\n58.28\n9.22\n89.58\n12.86\n\n\n1,957.00\n32.00\n10.54\n59.27\n9.89\n89.67\n14.94\n\n\n1,958.00\n32.42\n10.63\n60.59\n9.40\n90.67\n13.74\n\n\n1,959.00\n30.58\n9.08\n60.41\n9.41\n92.58\n11.97\n\n\n1,960.00\n31.17\n9.29\n59.37\n9.75\n91.08\n14.61\n\n\n1,961.00\n30.00\n9.53\n59.73\n10.54\n91.08\n14.44\n\n\n1,962.00\n30.67\n9.38\n58.95\n8.86\n90.50\n10.38\n\n\n1,963.00\n31.50\n9.45\n58.55\n9.30\n88.25\n11.99\n\n\n1,964.00\n29.67\n8.77\n58.03\n9.63\n90.50\n12.63\n\n\n1,965.00\n30.67\n7.49\n57.69\n9.08\n88.42\n9.97\n\n\n1,966.00\n29.67\n7.33\n58.91\n9.52\n91.00\n13.45\n\n\n1,967.00\n32.50\n10.02\n59.20\n10.94\n88.67\n14.37\n\n\n1,968.00\n29.75\n8.14\n58.88\n9.08\n90.17\n11.75\n\n\n1,969.00\n32.58\n8.44\n59.07\n9.66\n89.50\n13.55\n\n\n1,970.00\n30.25\n8.28\n59.28\n8.86\n91.58\n14.50\n\n\n1,971.00\n28.17\n8.90\n57.92\n10.25\n90.58\n13.43\n\n\n1,972.00\n30.00\n8.55\n58.56\n9.71\n89.92\n13.33\n\n\n1,973.00\n29.55\n7.06\n57.20\n9.13\n88.33\n15.29\n\n\n1,974.00\n31.50\n8.96\n59.05\n9.67\n89.92\n13.62\n\n\n1,975.00\n28.83\n10.25\n57.81\n9.24\n90.50\n12.00\n\n\n1,976.00\n29.50\n10.66\n59.21\n9.47\n94.08\n12.00\n\n\n1,977.00\n30.25\n8.16\n59.58\n9.23\n91.08\n11.83\n\n\n1,978.00\n32.58\n7.55\n59.79\n9.68\n90.00\n13.90\n\n\n1,979.00\n31.33\n9.24\n60.17\n10.13\n89.50\n15.01\n\n\n1,980.00\n31.83\n7.49\n60.30\n8.05\n93.25\n12.61\n\n\n1,981.00\n34.17\n6.99\n61.16\n8.77\n90.42\n12.16\n\n\n1,982.00\n32.92\n6.50\n58.64\n9.48\n87.67\n14.25\n\n\n1,983.00\n36.17\n7.49\n60.61\n8.95\n88.25\n14.55\n\n\n1,984.00\n32.33\n6.65\n60.81\n10.51\n91.33\n14.08\n\n\n1,985.00\n31.42\n8.58\n56.78\n9.66\n90.75\n12.84\n\n\n1,986.00\n32.75\n6.89\n58.83\n9.25\n90.67\n10.05\n\n\n1,987.00\n31.75\n10.96\n61.10\n7.77\n89.92\n14.61\n\n\n1,988.00\n32.67\n7.94\n49.23\n5.70\n91.83\n11.88\n\n\n1,989.00\n32.50\n9.43\n60.33\n9.45\n92.00\n11.62\n\n\n1,990.00\n31.50\n12.67\n59.42\n11.32\n93.58\n12.35\n\n\n1,991.00\n32.58\n9.90\n60.83\n8.79\n90.92\n13.06\n\n\n1,992.00\n36.58\n8.99\n60.51\n9.95\n88.50\n12.69\n\n\n1,993.00\n33.58\n8.38\n59.22\n8.77\n89.83\n13.08\n\n\n1,994.00\n33.42\n8.87\n58.43\n9.93\n89.42\n12.09\n\n\n1,995.00\n35.67\n5.55\n60.17\n7.98\n88.50\n12.31\n\n\n1,996.00\n33.42\n6.72\n60.13\n8.56\n92.00\n13.81\n\n\n1,997.00\n34.42\n8.30\n59.90\n9.01\n89.42\n12.71\n\n\n1,998.00\n35.67\n9.39\n57.75\n9.82\n86.17\n14.97\n\n\n1,999.00\n33.42\n8.34\n57.55\n8.89\n88.67\n12.12\n\n\n2,000.00\n34.67\n8.72\n58.88\n9.14\n89.33\n15.06\n\n\n2,001.00\n35.08\n8.75\n59.16\n10.25\n90.83\n14.35\n\n\n2,002.00\n33.67\n8.24\n58.24\n9.71\n91.00\n14.59\n\n\n2,003.00\n33.55\n8.77\n58.31\n9.60\n87.09\n13.90\n\n\n2,004.00\n33.73\n8.30\n57.79\n9.23\n87.36\n13.89\n\n\n2,005.00\n35.92\n6.75\n59.71\n9.11\n87.58\n12.40\n\n\n2,006.00\n35.25\n9.67\n59.05\n11.02\n90.08\n13.71\n\n\n2,007.00\n33.58\n10.59\n59.59\n10.53\n93.83\n11.87\n\n\n2,008.00\n35.67\n8.96\n60.04\n10.55\n93.58\n14.09\n\n\n2,009.00\n34.00\n8.16\n59.62\n10.31\n93.17\n13.54\n\n\n2,010.00\n34.42\n6.95\n58.78\n8.47\n91.08\n14.12\n\n\n2,011.00\n34.00\n8.55\n58.37\n9.75\n89.17\n12.30\n\n\n2,012.00\n33.75\n9.55\n60.10\n10.00\n94.17\n13.47\n\n\n2,013.00\n34.08\n9.95\n60.27\n10.66\n92.83\n12.91\n\n\n2,014.00\n36.83\n8.96\n62.31\n8.45\n94.08\n11.86\n\n\n2,015.00\n36.08\n10.85\n61.17\n10.09\n93.08\n11.85\n\n\n2,016.00\n35.33\n8.13\n61.08\n8.97\n91.58\n13.82\n\n\n2,017.00\n36.08\n9.89\n61.74\n10.35\n93.50\n14.60\n\n\n2,018.00\n34.92\n9.93\n60.93\n9.45\n91.75\n12.14\n\n\n2,019.00\n33.17\n7.90\n60.06\n9.85\n88.83\n13.82\n\n\n2,020.00\n35.08\n9.87\n60.92\n10.43\n94.83\n14.96\n\n\n2,021.00\n34.50\n8.87\n60.11\n9.71\n93.75\n11.79\n\n\n2,022.00\n36.00\n9.90\n60.94\n11.28\n93.00\n14.74\n\n\n2,023.00\n35.58\n8.38\n59.33\n9.74\n88.75\n14.57\n\n\n2,024.00\n36.83\n9.25\n61.27\n10.46\n91.58\n15.05\n\n\n2,025.00\n33.00\n8.00\n52.25\n4.21\n84.60\n5.41\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeasonal\n\n\n\n\n\n\nPlot (aggregated)Plot (raw)Table\n\n\n\n\nCode\nsummary_table &lt;- monthly_weather %&gt;% \n  mutate(season = factor(season, levels = c(\"Winter\", \"Spring\", \"Summer\", \"Fall\"))) %&gt;%\n  group_by(season) %&gt;%\n  summarise(\n    Min_mean = mean(min, na.rm = T), \n    Min_sd = sd(min, na.rm = T),\n    Mean_mean = mean(mean, na.rm = T), \n    Mean_sd = sd(mean, na.rm = T),\n    Max_mean = mean(max, na.rm = T), \n    Max_sd = sd(max, na.rm = T)\n  ) %&gt;%\n  arrange(season)\n\n\nsummary_table %&gt;% \n  ggplot(aes(x = season)) + \n  geom_line(aes(y = Min_mean, col = \"Min_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Max_mean, col = \"Max_mean\", group = 1), linewidth = .75) + \n  geom_point(aes(y = Min_mean, col = season, group = 1), size = 3) + \n  geom_point(aes(y = Mean_mean, col = season, group = 1), size = 3) + \n  geom_point(aes(y = Max_mean, col = season, group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  ylab(\"Temperature (F)\")+ xlab(\"Season\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + ylim(c(0,120))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;% \n  ggplot(aes(x = season)) + \n  geom_line(aes(y = Min_mean, col = \"Min_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Max_mean, col = \"Max_mean\", group = 1), linewidth = .75) + \n  geom_point(aes(y = Min_mean, col = season, group = 1), size = 3) + \n  geom_point(aes(y = Mean_mean, col = season, group = 1), size = 3) + \n  geom_point(aes(y = Max_mean, col = season, group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  geom_point(data = monthly_weather, aes(x = season, y = min, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = season, y = mean, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = season, y = max, col = season), alpha = 0.1, position = position_jitter()) +\n  ylab(\"Temperature (F)\")+ xlab(\"Year\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5))+ ylim(c(0, 120))\n\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 41 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 9 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"All-time Yearly Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    Min_mean = \"Mean\", \n    Min_sd = \"SD\", \n    Mean_mean = \"Mean\", \n    Mean_sd = \"SD\", \n    Max_mean = \"Mean\",\n    Max_sd = \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(Min_mean, Min_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(Mean_mean, Mean_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(Max_mean, Max_sd)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Yearly Summaries\n\n\nseason\n\nMonthly Minimums\n\n\nMonthly Means\n\n\nMonthly Maximums\n\n\n\nMean\nSD\nMean\nSD\nMean\nSD\n\n\n\n\nWinter\n22.86\n5.06\n48.09\n2.97\n74.09\n4.85\n\n\nSpring\n32.22\n4.34\n57.27\n4.44\n89.02\n8.00\n\n\nSummer\n41.92\n3.70\n70.32\n3.04\n105.45\n3.89\n\n\nFall\n31.92\n7.23\n60.86\n6.90\n94.66\n9.17\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMins, Means, Maxes\n\nAll time FIXME ADD MIN AND MAX\n\nHistogramsBoxplotsTable\n\n\n\n\nCode\nsummary_table_all &lt;- monthly_weather %&gt;% \n  summarise(\n    \n    Min_mean = mean(min, na.rm = T), \n    Min_sd = sd(min, na.rm = T),\n    Mean_mean = mean(mean, na.rm = T), \n    Mean_sd = sd(mean, na.rm = T),\n    Max_mean = mean(max, na.rm = T), \n    Max_sd = sd(max, na.rm = T)\n  )\n\n## chat help\n\nfacet_vars &lt;- c(\"min\", \"mean\", \"max\")\n\n# Step 1: Pivot your summary table\nvline_data &lt;- summary_table_all %&gt;%\n  pivot_longer(cols = contains(c(\"Min_mean\", \"Mean_mean\", \"Max_mean\")),\n               names_to = \"name\", values_to = \"xintercept\") \nvline_data$name = facet_vars\n\n\nmonthly_weather %&gt;%\n  bind_cols(summary_table_all[rep(1, nrow(monthly_weather)), ]) %&gt;%\n  select(-c(xmin, xmax)) %&gt;%\n  pivot_longer(cols = contains(c(\"min\", \"mean\", \"max\"))) %&gt;%\n  filter(name %in% facet_vars) %&gt;%\n  select(year, month, date, season, name, value) %&gt;%\n  ggplot(aes(x = value, fill = name)) +\n  geom_histogram(bins = 30) +\n  geom_vline(\n    data = vline_data,\n    aes(xintercept = xintercept),\n    color = \"white\", linewidth = 1, linetype = \"dashed\"\n  ) +\n  facet_grid(name~., scales = \"fixed\") +\n  theme_minimal() +\n  scale_fill_manual(values = plot_cols)\n\n\nWarning: Removed 60 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n## chat help\n\nfacet_vars &lt;- c(\"min\", \"mean\", \"max\")\n\n# Step 1: Pivot your summary table\nvline_data &lt;- summary_table_all %&gt;%\n  pivot_longer(cols = contains(c(\"Min_mean\", \"Mean_mean\", \"Max_mean\")),\n               names_to = \"name\", values_to = \"xintercept\") \nvline_data$name = facet_vars\n\n\nmonthly_weather %&gt;%\n  bind_cols(summary_table_all[rep(1, nrow(monthly_weather)), ]) %&gt;%\n  select(-c(xmin, xmax)) %&gt;%\n  pivot_longer(cols = contains(c(\"min\", \"mean\", \"max\"))) %&gt;%\n  filter(name %in% facet_vars) %&gt;%\n  select(year, month, date, season, name, value) %&gt;%\n  ggplot(aes(x = value, fill = name)) +\n  geom_boxplot() +\n  geom_vline(\n    data = vline_data,\n    aes(xintercept = xintercept),\n    color = \"white\", linewidth = 1, linetype = \"dashed\"\n  ) +\n  facet_grid(name~., scales = \"fixed\") +\n  theme_minimal() +\n  scale_fill_manual(values = plot_cols)\n\n\nWarning: Removed 60 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table_all %&gt;%\ngt() %&gt;%\n  tab_header(\n    title = \"All-time Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    Min_mean = \"Mean\", \n    Min_sd = \"SD\", \n    Mean_mean = \"Mean\", \n    Mean_sd = \"SD\", \n    Max_mean = \"Mean\",\n    Max_sd = \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(Min_mean, Min_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(Mean_mean, Mean_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(Max_mean, Max_sd)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Summaries\n\n\n\nMonthly Minimums\n\n\nMonthly Means\n\n\nMonthly Maximums\n\n\n\nMean\nSD\nMean\nSD\nMean\nSD\n\n\n\n\n32.19\n8.54\n59.08\n9.21\n90.75\n13.21\n\n\n\n\n\n\n\n\n\n\n\n\nBy time unit (month, season, year) FIXME WRONG STATS\n\nMonthly FIXME WRONG STATS\n\nPlot (aggregated)Plot (raw)Table\n\n\n\n\nCode\nmonth.abb = c(\"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\" , \"June\", \"July\", \"Aug\",  \"Sept\", \"Oct\",  \"Nov\") \nsummary_table &lt;- monthly_weather %&gt;% \n  mutate(month = factor(month, levels = month.abb)) %&gt;%\n  group_by(month) %&gt;%\n  summarise(\n    Min_mean = mean(min, na.rm = T), \n    Min_sd = sd(min, na.rm = T),\n    Mean_mean = mean(mean, na.rm = T), \n    Mean_sd = sd(mean, na.rm = T),\n    Max_mean = mean(max, na.rm = T), \n    Max_sd = sd(max, na.rm = T)\n  ) %&gt;%\n  arrange(month)\n\nplot_cols &lt;- c(plot_cols, \"Min_mean\" = \"blue\", \"Mean_mean\" = \"grey\", \"Max_mean\" = \"red\")\n\nagg_plot&lt;- summary_table %&gt;% \n  ggplot(aes(x = month)) + \n  geom_line(aes(y = Min_mean, col = \"Min_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Max_mean, col = \"Max_mean\", group = 1), linewidth = .75) + \n  geom_point(aes(y = Min_mean, col = \"Min_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Max_mean, col = \"Max_mean\", group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  ylab(\"Temperature (F)\")+ xlab(\"Month\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + ylim(c(0,120))\n\nagg_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nagg_plot + \n  geom_point(data = monthly_weather, aes(x = month, y = min, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = month, y = mean, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = month, y = max, col = season), alpha = 0.1, position = position_jitter())  +\n  ylab(\"Temperature (F)\")+ xlab(\"Month\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + \n  ylim(c(0,120))\n\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 10 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 41 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 9 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"All-time Monthly Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    Min_mean = \"Mean\", \n    Min_sd = \"SD\", \n    Mean_mean = \"Mean\", \n    Mean_sd = \"SD\", \n    Max_mean = \"Mean\",\n    Max_sd = \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(Min_mean, Min_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(Mean_mean, Mean_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(Max_mean, Max_sd)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Monthly Summaries\n\n\nmonth\n\nMonthly Minimums\n\n\nMonthly Means\n\n\nMonthly Maximums\n\n\n\nMean\nSD\nMean\nSD\nMean\nSD\n\n\n\n\nDec\n21.37\n4.43\n47.04\n2.45\n73.26\n4.48\n\n\nJan\n21.78\n5.45\n47.08\n2.72\n72.90\n4.52\n\n\nFeb\n25.44\n4.23\n50.13\n2.61\n76.10\n4.92\n\n\nMar\n29.26\n3.71\n53.12\n2.72\n81.49\n5.23\n\n\nApr\n31.68\n3.26\n56.89\n2.58\n89.21\n5.54\n\n\nMay\n35.71\n3.32\n61.89\n2.52\n96.37\n4.85\n\n\nJune\n39.79\n3.33\n67.56\n2.55\n103.62\n4.08\n\n\nJuly\n43.24\n3.27\n71.86\n2.32\n106.93\n3.43\n\n\nAug\n42.75\n3.55\n71.57\n2.06\n105.81\n3.37\n\n\nSept\n39.23\n3.74\n68.46\n2.40\n103.51\n4.57\n\n\nOct\n31.74\n4.32\n61.47\n2.50\n96.13\n4.46\n\n\nNov\n24.77\n4.42\n52.73\n2.31\n84.33\n4.93\n\n\n\n\n\n\n\n\n\n\n\n\nYearly FIXME WRONG STATS\n\nPlot (aggregated)Plot (raw)Table\n\n\n\n\nCode\nsummary_table &lt;- monthly_weather %&gt;% \n  group_by(year) %&gt;%\n  summarise(\n    Min_mean = mean(min, na.rm = T), \n    Min_sd = sd(min, na.rm = T),\n    Mean_mean = mean(mean, na.rm = T), \n    Mean_sd = sd(mean, na.rm = T),\n    Max_mean = mean(max, na.rm = T), \n    Max_sd = sd(max, na.rm = T)\n  ) %&gt;%\n  arrange(year)\n\n\nsummary_table %&gt;% \n  ggplot(aes(x = year)) + \n  geom_line(aes(y = Min_mean, col = \"Min_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Max_mean, col = \"Max_mean\", group = 1), linewidth = .75) + \n  geom_point(aes(y = Min_mean, col = \"Min_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Max_mean, col = \"Max_mean\", group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  ylab(\"Temperature (F)\")+ xlab(\"Year\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + ylim(c(0,120))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;% \n  ggplot(aes(x = year)) + \n  geom_line(aes(y = Min_mean, col = \"Min_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Max_mean, col = \"Max_mean\", group = 1), linewidth = .75) + \n  geom_point(aes(y = Min_mean, col = \"Min_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), size = 3) + \n  geom_point(aes(y = Max_mean, col = \"Max_mean\", group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  geom_point(data = monthly_weather, aes(x = year, y = min, col = \"min\"), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = year, y = mean, col = \"mean\"), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = year, y = max, col = \"max\"), alpha = 0.1, position = position_jitter()) +\n  ylab(\"Temperature (F)\")+ xlab(\"Year\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5))+ ylim(c(0, 120))\n\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 41 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 9 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"All-time Yearly Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    Min_mean = \"Mean\", \n    Min_sd = \"SD\", \n    Mean_mean = \"Mean\", \n    Mean_sd = \"SD\", \n    Max_mean = \"Mean\",\n    Max_sd = \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(Min_mean, Min_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(Mean_mean, Mean_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(Max_mean, Max_sd)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Yearly Summaries\n\n\nyear\n\nMonthly Minimums\n\n\nMonthly Means\n\n\nMonthly Maximums\n\n\n\nMean\nSD\nMean\nSD\nMean\nSD\n\n\n\n\n1,910.00\n28.42\n7.99\n58.51\n8.41\n94.83\n14.06\n\n\n1,911.00\n28.58\n8.77\n56.71\n8.74\n90.83\n13.49\n\n\n1,912.00\n27.33\n9.18\n56.86\n8.61\n88.67\n14.58\n\n\n1,913.00\n27.17\n10.62\n58.06\n9.85\n93.08\n14.08\n\n\n1,914.00\n30.33\n6.58\n58.56\n7.45\n91.50\n13.61\n\n\n1,915.00\n29.92\n8.07\n58.77\n8.86\n91.58\n14.76\n\n\n1,916.00\n27.50\n9.29\n57.80\n10.24\n90.25\n15.69\n\n\n1,917.00\n28.58\n8.13\n58.87\n11.25\n94.00\n15.83\n\n\n1,918.00\n30.25\n9.51\n58.49\n10.57\n92.50\n12.08\n\n\n1,919.00\n29.42\n8.13\n57.98\n9.92\n90.33\n15.26\n\n\n1,920.00\n33.75\n7.03\n57.73\n9.14\n88.67\n15.80\n\n\n1,921.00\n32.58\n7.76\n58.90\n9.06\n91.75\n12.64\n\n\n1,922.00\n30.83\n7.69\n57.67\n10.96\n86.58\n16.36\n\n\n1,923.00\n32.50\n8.47\n57.87\n9.34\n90.25\n14.04\n\n\n1,924.00\n31.00\n9.50\n58.18\n8.74\n90.08\n13.61\n\n\n1,925.00\n33.00\n6.58\n58.41\n8.00\n90.83\n14.17\n\n\n1,926.00\n35.08\n5.55\n60.21\n9.04\n91.83\n12.90\n\n\n1,927.00\n33.75\n6.08\n58.90\n8.68\n89.67\n13.83\n\n\n1,928.00\n33.50\n7.54\n59.61\n8.99\n91.83\n15.09\n\n\n1,929.00\n32.25\n8.01\n59.01\n10.11\n91.83\n15.07\n\n\n1,930.00\n33.42\n7.04\n58.64\n8.75\n90.50\n12.82\n\n\n1,931.00\n34.58\n7.51\n60.32\n10.43\n92.50\n14.62\n\n\n1,932.00\n32.58\n7.50\n58.08\n10.51\n91.00\n15.50\n\n\n1,933.00\n31.25\n7.84\n57.62\n10.34\n91.42\n17.55\n\n\n1,934.00\n33.67\n4.72\n59.38\n8.46\n91.25\n13.88\n\n\n1,935.00\n31.33\n7.64\n57.05\n10.23\n88.92\n13.81\n\n\n1,936.00\n33.17\n7.07\n59.06\n10.14\n89.75\n15.60\n\n\n1,937.00\n32.50\n8.82\n58.11\n11.21\n88.67\n16.07\n\n\n1,938.00\n32.67\n8.80\n58.19\n9.33\n88.50\n14.57\n\n\n1,939.00\n31.50\n6.60\n59.02\n9.81\n90.75\n14.08\n\n\n1,940.00\n31.67\n9.31\n60.33\n7.93\n91.83\n14.10\n\n\n1,941.00\n32.17\n7.93\n60.15\n7.14\n89.08\n12.69\n\n\n1,942.00\n30.83\n9.07\n59.01\n10.14\n91.58\n14.54\n\n\n1,943.00\n31.25\n8.02\n59.49\n7.81\n92.33\n11.97\n\n\n1,944.00\n30.75\n6.65\n58.53\n8.65\n90.67\n14.39\n\n\n1,945.00\n29.33\n8.26\n58.66\n9.54\n91.67\n14.36\n\n\n1,946.00\n29.25\n9.36\n58.10\n10.10\n89.92\n13.83\n\n\n1,947.00\n29.75\n9.24\n59.31\n10.12\n93.67\n13.58\n\n\n1,948.00\n27.67\n10.33\n57.59\n9.64\n90.42\n13.67\n\n\n1,949.00\n29.25\n10.22\n57.54\n10.69\n89.50\n15.71\n\n\n1,950.00\n30.75\n8.79\n59.83\n8.01\n92.92\n13.89\n\n\n1,951.00\n30.42\n8.07\n58.34\n9.29\n90.67\n14.69\n\n\n1,952.00\n31.92\n7.04\n59.19\n9.89\n91.17\n12.68\n\n\n1,953.00\n29.67\n9.27\n58.98\n8.78\n91.50\n10.47\n\n\n1,954.00\n29.33\n8.35\n58.98\n9.01\n91.42\n13.45\n\n\n1,955.00\n29.42\n7.14\n57.89\n9.51\n90.17\n13.32\n\n\n1,956.00\n30.42\n8.69\n58.28\n9.22\n89.58\n12.86\n\n\n1,957.00\n32.00\n10.54\n59.27\n9.89\n89.67\n14.94\n\n\n1,958.00\n32.42\n10.63\n60.59\n9.40\n90.67\n13.74\n\n\n1,959.00\n30.58\n9.08\n60.41\n9.41\n92.58\n11.97\n\n\n1,960.00\n31.17\n9.29\n59.37\n9.75\n91.08\n14.61\n\n\n1,961.00\n30.00\n9.53\n59.73\n10.54\n91.08\n14.44\n\n\n1,962.00\n30.67\n9.38\n58.95\n8.86\n90.50\n10.38\n\n\n1,963.00\n31.50\n9.45\n58.55\n9.30\n88.25\n11.99\n\n\n1,964.00\n29.67\n8.77\n58.03\n9.63\n90.50\n12.63\n\n\n1,965.00\n30.67\n7.49\n57.69\n9.08\n88.42\n9.97\n\n\n1,966.00\n29.67\n7.33\n58.91\n9.52\n91.00\n13.45\n\n\n1,967.00\n32.50\n10.02\n59.20\n10.94\n88.67\n14.37\n\n\n1,968.00\n29.75\n8.14\n58.88\n9.08\n90.17\n11.75\n\n\n1,969.00\n32.58\n8.44\n59.07\n9.66\n89.50\n13.55\n\n\n1,970.00\n30.25\n8.28\n59.28\n8.86\n91.58\n14.50\n\n\n1,971.00\n28.17\n8.90\n57.92\n10.25\n90.58\n13.43\n\n\n1,972.00\n30.00\n8.55\n58.56\n9.71\n89.92\n13.33\n\n\n1,973.00\n29.55\n7.06\n57.20\n9.13\n88.33\n15.29\n\n\n1,974.00\n31.50\n8.96\n59.05\n9.67\n89.92\n13.62\n\n\n1,975.00\n28.83\n10.25\n57.81\n9.24\n90.50\n12.00\n\n\n1,976.00\n29.50\n10.66\n59.21\n9.47\n94.08\n12.00\n\n\n1,977.00\n30.25\n8.16\n59.58\n9.23\n91.08\n11.83\n\n\n1,978.00\n32.58\n7.55\n59.79\n9.68\n90.00\n13.90\n\n\n1,979.00\n31.33\n9.24\n60.17\n10.13\n89.50\n15.01\n\n\n1,980.00\n31.83\n7.49\n60.30\n8.05\n93.25\n12.61\n\n\n1,981.00\n34.17\n6.99\n61.16\n8.77\n90.42\n12.16\n\n\n1,982.00\n32.92\n6.50\n58.64\n9.48\n87.67\n14.25\n\n\n1,983.00\n36.17\n7.49\n60.61\n8.95\n88.25\n14.55\n\n\n1,984.00\n32.33\n6.65\n60.81\n10.51\n91.33\n14.08\n\n\n1,985.00\n31.42\n8.58\n56.78\n9.66\n90.75\n12.84\n\n\n1,986.00\n32.75\n6.89\n58.83\n9.25\n90.67\n10.05\n\n\n1,987.00\n31.75\n10.96\n61.10\n7.77\n89.92\n14.61\n\n\n1,988.00\n32.67\n7.94\n49.23\n5.70\n91.83\n11.88\n\n\n1,989.00\n32.50\n9.43\n60.33\n9.45\n92.00\n11.62\n\n\n1,990.00\n31.50\n12.67\n59.42\n11.32\n93.58\n12.35\n\n\n1,991.00\n32.58\n9.90\n60.83\n8.79\n90.92\n13.06\n\n\n1,992.00\n36.58\n8.99\n60.51\n9.95\n88.50\n12.69\n\n\n1,993.00\n33.58\n8.38\n59.22\n8.77\n89.83\n13.08\n\n\n1,994.00\n33.42\n8.87\n58.43\n9.93\n89.42\n12.09\n\n\n1,995.00\n35.67\n5.55\n60.17\n7.98\n88.50\n12.31\n\n\n1,996.00\n33.42\n6.72\n60.13\n8.56\n92.00\n13.81\n\n\n1,997.00\n34.42\n8.30\n59.90\n9.01\n89.42\n12.71\n\n\n1,998.00\n35.67\n9.39\n57.75\n9.82\n86.17\n14.97\n\n\n1,999.00\n33.42\n8.34\n57.55\n8.89\n88.67\n12.12\n\n\n2,000.00\n34.67\n8.72\n58.88\n9.14\n89.33\n15.06\n\n\n2,001.00\n35.08\n8.75\n59.16\n10.25\n90.83\n14.35\n\n\n2,002.00\n33.67\n8.24\n58.24\n9.71\n91.00\n14.59\n\n\n2,003.00\n33.55\n8.77\n58.31\n9.60\n87.09\n13.90\n\n\n2,004.00\n33.73\n8.30\n57.79\n9.23\n87.36\n13.89\n\n\n2,005.00\n35.92\n6.75\n59.71\n9.11\n87.58\n12.40\n\n\n2,006.00\n35.25\n9.67\n59.05\n11.02\n90.08\n13.71\n\n\n2,007.00\n33.58\n10.59\n59.59\n10.53\n93.83\n11.87\n\n\n2,008.00\n35.67\n8.96\n60.04\n10.55\n93.58\n14.09\n\n\n2,009.00\n34.00\n8.16\n59.62\n10.31\n93.17\n13.54\n\n\n2,010.00\n34.42\n6.95\n58.78\n8.47\n91.08\n14.12\n\n\n2,011.00\n34.00\n8.55\n58.37\n9.75\n89.17\n12.30\n\n\n2,012.00\n33.75\n9.55\n60.10\n10.00\n94.17\n13.47\n\n\n2,013.00\n34.08\n9.95\n60.27\n10.66\n92.83\n12.91\n\n\n2,014.00\n36.83\n8.96\n62.31\n8.45\n94.08\n11.86\n\n\n2,015.00\n36.08\n10.85\n61.17\n10.09\n93.08\n11.85\n\n\n2,016.00\n35.33\n8.13\n61.08\n8.97\n91.58\n13.82\n\n\n2,017.00\n36.08\n9.89\n61.74\n10.35\n93.50\n14.60\n\n\n2,018.00\n34.92\n9.93\n60.93\n9.45\n91.75\n12.14\n\n\n2,019.00\n33.17\n7.90\n60.06\n9.85\n88.83\n13.82\n\n\n2,020.00\n35.08\n9.87\n60.92\n10.43\n94.83\n14.96\n\n\n2,021.00\n34.50\n8.87\n60.11\n9.71\n93.75\n11.79\n\n\n2,022.00\n36.00\n9.90\n60.94\n11.28\n93.00\n14.74\n\n\n2,023.00\n35.58\n8.38\n59.33\n9.74\n88.75\n14.57\n\n\n2,024.00\n36.83\n9.25\n61.27\n10.46\n91.58\n15.05\n\n\n2,025.00\n33.00\n8.00\n52.25\n4.21\n84.60\n5.41\n\n\n\n\n\n\n\n\n\n\n\n\nSeasonal FIXME WRONG STATS\n\nPlot (aggregated)Plot (raw)Table\n\n\n\n\nCode\nsummary_table &lt;- monthly_weather %&gt;% \n  mutate(season = factor(season, levels = c(\"Winter\", \"Spring\", \"Summer\", \"Fall\"))) %&gt;%\n  group_by(season) %&gt;%\n  summarise(\n    Min_mean = mean(min, na.rm = T), \n    Min_sd = sd(min, na.rm = T),\n    Mean_mean = mean(mean, na.rm = T), \n    Mean_sd = sd(mean, na.rm = T),\n    Max_mean = mean(max, na.rm = T), \n    Max_sd = sd(max, na.rm = T)\n  ) %&gt;%\n  arrange(season)\n\n\nsummary_table %&gt;% \n  ggplot(aes(x = season)) + \n  geom_line(aes(y = Min_mean, col = \"Min_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Max_mean, col = \"Max_mean\", group = 1), linewidth = .75) + \n  geom_point(aes(y = Min_mean, col = season, group = 1), size = 3) + \n  geom_point(aes(y = Mean_mean, col = season, group = 1), size = 3) + \n  geom_point(aes(y = Max_mean, col = season, group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  ylab(\"Temperature (F)\")+ xlab(\"Season\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5)) + ylim(c(0,120))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;% \n  ggplot(aes(x = season)) + \n  geom_line(aes(y = Min_mean, col = \"Min_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Mean_mean, col = \"Mean_mean\", group = 1), linewidth = .75) + \n  geom_line(aes(y = Max_mean, col = \"Max_mean\", group = 1), linewidth = .75) + \n  geom_point(aes(y = Min_mean, col = season, group = 1), size = 3) + \n  geom_point(aes(y = Mean_mean, col = season, group = 1), size = 3) + \n  geom_point(aes(y = Max_mean, col = season, group = 1), size = 3) + \n  scale_color_manual(values = plot_cols, name = \"Legend\") + \n  geom_point(data = monthly_weather, aes(x = season, y = min, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = season, y = mean, col = season), alpha = 0.1, position = position_jitter()) +\n  geom_point(data = monthly_weather, aes(x = season, y = max, col = season), alpha = 0.1, position = position_jitter()) +\n  ylab(\"Temperature (F)\")+ xlab(\"Year\") +\n   theme(panel.grid.major = element_blank(), \n       panel.grid.minor = element_blank(),\n       panel.background = element_blank(), \n       axis.line = element_blank(), \n       axis.title.y = element_text(angle = 0, vjust = .5))+ ylim(c(0, 120))\n\n\nWarning: Removed 10 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 41 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 9 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary_table %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"All-time Yearly Summaries\"\n  ) %&gt;%\n  fmt_number(\n    columns = where(is.numeric), \n    decimals = 2\n  )%&gt;%\n  cols_label(\n    Min_mean = \"Mean\", \n    Min_sd = \"SD\", \n    Mean_mean = \"Mean\", \n    Mean_sd = \"SD\", \n    Max_mean = \"Mean\",\n    Max_sd = \"SD\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Minimums\",\n    columns = c(Min_mean, Min_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Means\",\n    columns = c(Mean_mean, Mean_sd)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Monthly Maximums\",\n    columns = c(Max_mean, Max_sd)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll-time Yearly Summaries\n\n\nseason\n\nMonthly Minimums\n\n\nMonthly Means\n\n\nMonthly Maximums\n\n\n\nMean\nSD\nMean\nSD\nMean\nSD\n\n\n\n\nWinter\n22.86\n5.06\n48.09\n2.97\n74.09\n4.85\n\n\nSpring\n32.22\n4.34\n57.27\n4.44\n89.02\n8.00\n\n\nSummer\n41.92\n3.70\n70.32\n3.04\n105.45\n3.89\n\n\nFall\n31.92\n7.23\n60.86\n6.90\n94.66\n9.17\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExceedances\nWhen the seasonal max or min reaches a new high or low, indicate this with a true/false.\nWe can either set this to start from the beginning of the series, or start the “counter” at a certain time. Since we will have three parts to our music where the last part contains the most information (the last part).\n\n\nCode\nout &lt;- monthly_weather %&gt;%\ngroup_by(season) %&gt;%\narrange(date) %&gt;%\nmutate(\nstart_flag = year &gt; 1977,\ncummax = cummax_ignore_na(max, start_flag),\ncummin = cummin_ignore_na(min, start_flag),\nnew_max = cummax == max,\nnew_min = cummin == min\n) %&gt;%\nungroup()\n\nmonthly_weather$new_max &lt;- out$new_max\nmonthly_weather$new_min &lt;- out$new_min\n\n\nggplot(monthly_weather, aes(x = date)) +\n  geom_line(aes(y = min, color = \"min\")) +\n  geom_point(aes(y = min, color = season)) +\n  geom_line(aes(y = max, color = \"max\")) +\n  geom_point(aes(y = max, color = season)) +\n  geom_line(aes(y = mean, color = \"mean\")) +\n  geom_point(aes(y = mean, color = season)) +\n  geom_point(data = filter(monthly_weather, new_max),\n             aes(x = date, y = max, color = season), size = 6, shape = 17) +\n  geom_point(data = filter(monthly_weather, new_min),\n             aes(x = date, y = min, color = season), size = 6, shape = 15) +\n  scale_color_manual(values = plot_cols) + \n  scale_x_date(labels = monthly_weather$season_year[monthly_weather$season == \"Winter\" & monthly_weather$season_year %%5 ==0], \n               breaks = monthly_weather$xmin[monthly_weather$season == \"Winter\"& monthly_weather$season_year %%5 ==0]) +\n  theme(axis.text.x = element_text(angle = 25))\n\n\n\n\n\n\n\n\n\n\n\nMissing Data\nAs you will hear (and see) in the animation, there are occasionally missing data points, resulting in silence!"
  },
  {
    "objectID": "data_backup.html#raw-data-for-sonification",
    "href": "data_backup.html#raw-data-for-sonification",
    "title": "Data Sourcing and Processing",
    "section": "Raw data for sonification",
    "text": "Raw data for sonification\nAfter all of the above processing and inspection, we can output\n\nVisualize\n\n\nOutput\n\n\nCode\nsave(monthly_weather, file = \"data/monthly_weather\")"
  },
  {
    "objectID": "News.html",
    "href": "News.html",
    "title": "News Stories",
    "section": "",
    "text": "We made the KSBY (Central Coast local) News!\nKSBY won’t let me embed their video so click “Watch on Youtube” below.\nThere’s also a video at the written article link",
    "crumbs": [
      "News Stories"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Us",
    "section": "",
    "text": "On the statistics side, sonification arose from prior joint work among Dr. Julia Schedler, Donya Behroozi, and Dr. Sinem Demirci.\n\n\n\nName\nRole\nAbount\n\n\n\n\nDr. Julia Schedler\nConceptualization, data processing and sourcing, sonification design and implementation, animation.\nDr. Julia Schedler is Assistant Professor in the Statistics Department in the Bailey College of Science and Mathematics at Cal Poly SLO. Besides sonification, Dr. Schedler works on time series modeling, spatial modeling, and workflows for customizing learning experiences.\n\n\nDonya Behroozi\nConceptualization and sonification function code\nRecent undergraduate and soon-to-be masters student at Cal Poly.\n\n\nDr. Sinem Demirci\nConceptualization and project management\nLecturer in the Statistics Department in the Bailey College of Science and Mathematics at Cal Poly SLO. Dr. Demirci’s research interests include Statistics and Data Science education and environmental and sustainability education.\n\n\n\nOn the performance side, Josh Schneider choreographed the dance and designed the lighting sequence.\n\nCalifornia Coastal Classroom Research Collaborative\nWe are incredibly grateful to the feedback from our C3RC collaborations, Dr. Jeanine Scaramozzino, Dr. Aaron Liggett, and Annica Wu (the artist behind the poppy art on the event fliers and the video!).\nFurther information is available on the 3CRC Webpage (under construction).\n\n\nAdditional Acknowledgements\nAdditional gratitude to everyone on the math department side of the 2nd floor of faculty offices east, especially Dr. Charlotte Mann and Dr. Ulric Lund, for listening to and/or being annoyed by drafts of the sonifications.\nAnd finally, I am extremely grateful to the funding organization within Cal Poly, unfortunately I did not get my ducks in a row so I will need to update with that information later. 🦆",
    "crumbs": [
      "About Us"
    ]
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "test",
    "section": "",
    "text": "All Time\n\n\n\n\n\n::: {.callout-note collapse=“true} ::: ::: {.callout-note collapse=”true} :::"
  },
  {
    "objectID": "test.html#monthly-summaries",
    "href": "test.html#monthly-summaries",
    "title": "test",
    "section": "Monthly Summaries",
    "text": "Monthly Summaries"
  },
  {
    "objectID": "test.html#seasonal-summaries",
    "href": "test.html#seasonal-summaries",
    "title": "test",
    "section": "Seasonal Summaries",
    "text": "Seasonal Summaries\n\n\n\n\n\n\nYearly summaries\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMeans and SDs\n\n\n\n\n\n\n\n\n\n\n\nAll Time\n\n\n\n\n\n::: {.callout-note collapse=“true} ::: ::: {.callout-note collapse=”true} :::"
  },
  {
    "objectID": "test.html#monthly-summaries-1",
    "href": "test.html#monthly-summaries-1",
    "title": "test",
    "section": "Monthly Summaries",
    "text": "Monthly Summaries"
  },
  {
    "objectID": "test.html#seasonal-summaries-1",
    "href": "test.html#seasonal-summaries-1",
    "title": "test",
    "section": "Seasonal Summaries",
    "text": "Seasonal Summaries\n\n\n\n\n\n\nYearly summaries\n\n\n\n\n\n\n\n\n\n:::"
  }
]